<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[初识Kotlin的泛型]]></title>
      <url>/2018/04/23/%E5%88%9D%E8%AF%86Kotlin%E7%9A%84%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们认为，Kotlin是一门比Java更优秀的JVM编程语言，Kotlin泛型设计的初衷就是为了解决Java泛型设计中一些不合理的问题。相对于Java的通配符，Kotlin语言针对协变和逆变引入两个新的关键词out和in。</p>
</blockquote>
<h3 id="out-协变-，是只读的，属于生产者，即用在方法的返回值位置"><a href="#out-协变-，是只读的，属于生产者，即用在方法的返回值位置" class="headerlink" title="out(协变)，是只读的，属于生产者，即用在方法的返回值位置"></a>out(协变)，是只读的，属于生产者，即用在方法的返回值位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">interface Link&lt;out T&gt; &#123;</div><div class="line">    fun node(): T</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun f1(linkStr: Link&lt;String&gt;) &#123;</div><div class="line">    // 这是一个合理的协变转换</div><div class="line">    val linkAny: Link&lt;Any&gt; = linkStr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的out等价于Java中的 ? extends List 通配符 。</p>
<h3 id="in-逆变-，是只写的，属于消费者，即用在方法的参数位置"><a href="#in-逆变-，是只写的，属于消费者，即用在方法的参数位置" class="headerlink" title="in(逆变)，是只写的，属于消费者，即用在方法的参数位置"></a>in(逆变)，是只写的，属于消费者，即用在方法的参数位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">interface Repo&lt;in T&gt; &#123;</div><div class="line">    fun add(t: T)</div><div class="line">&#125;</div><div class="line"></div><div class="line"> fun f2(repoAny: Repo&lt;Any&gt;) &#123;</div><div class="line">     // 这是一个合理的逆变转换</div><div class="line">     val repoStr: Repo&lt;String&gt; = repoAny</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里的in 等价于Java端的 ? super List 通配符</p>
<h2 id="小结：协变和逆变"><a href="#小结：协变和逆变" class="headerlink" title="小结：协变和逆变"></a>小结：协变和逆变</h2><p>协变和逆变对于Java程序员来说是一个全新的概念，为了便于理解，我用一个表格做一个简单的总结：</p>
<table>
<thead>
<tr>
<th>_</th>
<th>协变</th>
<th>逆变</th>
</tr>
</thead>
<tbody>
<tr>
<td>关键字</td>
<td>out</td>
<td>in</td>
</tr>
<tr>
<td>读写</td>
<td>只读</td>
<td>可写</td>
</tr>
<tr>
<td>位置</td>
<td>返回值</td>
<td>参数</td>
</tr>
<tr>
<td>角色</td>
<td>生产者</td>
<td>消费者</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Kotlin </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot集成rabbitmq]]></title>
      <url>/2018/03/07/spring-boot%E9%9B%86%E6%88%90rabbitmq/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Spring-boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[struct一键生成tag]]></title>
      <url>/2017/12/25/struct%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90tag/</url>
      <content type="html"><![CDATA[<p>背景：</p>
<p>go语言处理db、json的时候，具体代码的变量定义和db字段、json输出的时候可能不一样。</p>
<p>这个时候，我们需要用tag的方式来进行定义。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type MyStruct struct &#123;</div><div class="line">     Name      string `json:&quot;name&quot;`</div><div class="line">     MaxHeight int    `json:&quot;max_height&quot;`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果字段或结构体非常多的话，有十几二十几个，就非常的麻烦。</p>
<p>因此，就利用golang的反射，做了一个小工具来自动生成，具体使用如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//你的结构体定义</div><div class="line">type MyStruct struct &#123;</div><div class="line">     Name      string</div><div class="line">     MaxHeight int</div><div class="line">&#125;</div><div class="line"></div><div class="line">var s MyStruct</div><div class="line">//为结构体中的变量,生成json的tag</div><div class="line">//把单词用下划线连接（通过大写字母来区分）</div><div class="line">fmt.Prinln( tool.ProduceStructTag(s, &quot;json&quot;))</div></pre></td></tr></table></figure>
<p>这样就会得到最上面带tag的代码。</p>
<p>这个工具可以进一步改进，根据自生的框架做通用的代码生成。定义好结构体和接口，然后 duang 的一下生成代码，只需要写业务逻辑了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package tools</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;reflect&quot;</div><div class="line">	&quot;strings&quot;</div><div class="line">	&quot;unicode&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func getTagName(currName, tag string) (newName string) &#123;</div><div class="line">	first := true</div><div class="line">	for _, r := range currName &#123;</div><div class="line">		if unicode.IsUpper(r) &#123;</div><div class="line">			if first &#123;</div><div class="line">				newName = fmt.Sprintf(&quot;%s%s&quot;, newName, strings.ToLower(string(r)))</div><div class="line">				first = false</div><div class="line">			&#125; else &#123;</div><div class="line">				newName = fmt.Sprintf(&quot;%s_%s&quot;, newName, strings.ToLower(string(r)))</div><div class="line">			&#125;</div><div class="line">		&#125; else &#123;</div><div class="line">			newName = fmt.Sprintf(&quot;%s%s&quot;, newName, string(r))</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	newName = fmt.Sprintf(&quot;`%s:\&quot;%s\&quot;`&quot;, tag, newName)</div><div class="line">	return</div><div class="line">&#125;</div><div class="line"></div><div class="line">func ProduceStructTag(obj interface&#123;&#125;, tag string) string &#123;</div><div class="line">	var newDefineCode string</div><div class="line">	s := reflect.ValueOf(obj)</div><div class="line">	newDefineCode = fmt.Sprintf(&quot;type %s struct &#123;\n&quot;, s.Type().String())</div><div class="line">	for i := 0; i &lt; s.NumField(); i++ &#123;</div><div class="line">		f := s.Field(i)</div><div class="line">		n := s.Type().Field(i).Name</div><div class="line">		newDefineCode = fmt.Sprintf(&quot;%s\t%s\t%s\t\t%s\n&quot;,</div><div class="line">			newDefineCode,</div><div class="line">			n,</div><div class="line">			f.Type(),</div><div class="line">			getTagName(n, tag))</div><div class="line">	&#125;</div><div class="line">	newDefineCode = fmt.Sprintf(&quot;%s&#125;\n&quot;, newDefineCode)</div><div class="line">	return newDefineCode</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后一个送一个<a href="https://github.com/fatih/gomodifytags" target="_blank" rel="external">gomodifytags</a>,这个跟厉害</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[gRPC初体验]]></title>
      <url>/2017/12/01/gRPC%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h4 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h4><p><a href="https://github.com/grpc/grpc" target="_blank" rel="external">gRPC</a>是一个高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers)序列化协议开发，且支持众多开发语言。 gRPC提供了一种简单的方法来精确地定义服务和为iOS、Android和后台支持服务自动生成可靠性很强的客户端功能库。</p>
<h4 id="话不多说，直接Golang实战-windows10上"><a href="#话不多说，直接Golang实战-windows10上" class="headerlink" title="话不多说，直接Golang实战(windows10上)"></a>话不多说，直接Golang实战(windows10上)</h4><h6 id="安装protoc"><a href="#安装protoc" class="headerlink" title="安装protoc"></a>安装protoc</h6><p>首先去<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">https://github.com/google/protobuf/releases</a>下载windows版本的包，然后配置到电脑的环境变量中。</p>
<h6 id="安装protobuf库文件"><a href="#安装protobuf库文件" class="headerlink" title="安装protobuf库文件"></a>安装protobuf库文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/golang/protobuf/protoc-gen-go</div></pre></td></tr></table></figure>
<h6 id="安装grpc文件"><a href="#安装grpc文件" class="headerlink" title="安装grpc文件"></a>安装grpc文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get google.golang.org/grpc</div></pre></td></tr></table></figure>
<h6 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h6><p>打开编辑器，新建一个项目，在项目的目录下新建一个文件夹proto,然后新建一个文件叫hello.proto(我用的是GoLand编辑器，下载了一个proto的插件叫protobuf support)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">syntax = &quot;proto3&quot;; // 指定proto版本</div><div class="line"></div><div class="line">package proto;     // 指定包名</div><div class="line"></div><div class="line">// HelloRequest 请求结构</div><div class="line">message HelloRequest &#123;</div><div class="line">    string name = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// HelloReply 响应结构</div><div class="line">message HelloReply &#123;</div><div class="line">    string message = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义Hello服务</div><div class="line">service Hello &#123;</div><div class="line">    // 定义SayHello方法</div><div class="line">    rpc SayHello(HelloRequest) returns (HelloReply) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="编译文件，生成-pb-go-在项目根目录"><a href="#编译文件，生成-pb-go-在项目根目录" class="headerlink" title="编译文件，生成*.pb.go(在项目根目录)"></a>编译文件，生成*.pb.go(在项目根目录)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//固定结构</div><div class="line">protoc -I proto proto/hello.proto --go_out=plugins=grpc:proto</div><div class="line">// protoc -I 固定语法</div><div class="line">// proto proto/hello.proto  proto我们新建的文件夹 文件名hello.proto</div><div class="line">// -go_out=plugins=grpc: 固定语法</div><div class="line">// proto 生成的*.pb.go放的位置</div></pre></td></tr></table></figure>
<h6 id="编写服务端的代码"><a href="#编写服务端的代码" class="headerlink" title="编写服务端的代码"></a>编写服务端的代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;net&quot;</div><div class="line"></div><div class="line">	pb &quot;./proto&quot; // 引入编译生成的包</div><div class="line">	&quot;golang.org/x/net/context&quot;</div><div class="line">	&quot;google.golang.org/grpc&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">)</div><div class="line"></div><div class="line">const (</div><div class="line">	// Address gRPC服务地址</div><div class="line">	Address = &quot;127.0.0.1:50052&quot;</div><div class="line">)</div><div class="line"></div><div class="line">// 定义helloService并实现约定的接口</div><div class="line">type HelloService struct&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">//实现proto中定义的方法SayHello</div><div class="line">func (h HelloService) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123;</div><div class="line">	resp := new(pb.HelloReply)</div><div class="line">	resp.Message = &quot;Hello &quot; + in.Name + &quot;.&quot;</div><div class="line"></div><div class="line">	return resp, nil</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	</div><div class="line">	listen, err := net.Listen(&quot;tcp&quot;, Address)</div><div class="line"></div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatalf(&quot;failed to listen: %v&quot;, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 实例化grpc Server</div><div class="line">	s := grpc.NewServer()</div><div class="line"></div><div class="line">	// 注册HelloService</div><div class="line">	pb.RegisterHelloServer(s, HelloService&#123;&#125;)</div><div class="line"></div><div class="line">	log.Println(&quot;Listen on &quot; + Address)</div><div class="line"></div><div class="line">	s.Serve(listen)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="编写客户端的代码"><a href="#编写客户端的代码" class="headerlink" title="编写客户端的代码"></a>编写客户端的代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line"></div><div class="line">import (</div><div class="line">	pb &quot;./proto&quot; // 引入proto包</div><div class="line">	&quot;golang.org/x/net/context&quot;</div><div class="line">	&quot;google.golang.org/grpc&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">)</div><div class="line"></div><div class="line">const (</div><div class="line">	// Address gRPC服务地址</div><div class="line">	Address = &quot;127.0.0.1:50052&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	log.Println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	// 连接</div><div class="line">	conn, err := grpc.Dial(Address, grpc.WithInsecure())</div><div class="line"></div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	defer conn.Close()</div><div class="line"></div><div class="line">	// 初始化客户端</div><div class="line">	c := pb.NewHelloClient(conn)</div><div class="line"></div><div class="line">	// 调用方法</div><div class="line">	reqBody := new(pb.HelloRequest)</div><div class="line">	</div><div class="line">	reqBody.Name = &quot;gRPC&quot;</div><div class="line">	</div><div class="line">	r, err := c.SayHello(context.Background(), reqBody)</div><div class="line">	</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	log.Println(r.Message)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h6><p>先运行服务端代码，然后执行客户端，就可以看Hello gRPC.了。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>因为在天朝的原因，<strong>go get google.golang.org/grpc</strong> 可能会失败，这可以去<a href="https://github.com/grpc/grpc.git" target="_blank" rel="external">GitHub</a>clone代码到本地，然后改成相应的文件就可以了。</p>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker部署Golang应用]]></title>
      <url>/2017/11/29/Docker%E9%83%A8%E7%BD%B2Golang%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="external">Docker</a>是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p>
<h2 id="Docker通常用于如下场景"><a href="#Docker通常用于如下场景" class="headerlink" title="Docker通常用于如下场景"></a>Docker通常用于如下场景</h2><ul>
<li>web应用的自动化打包和发布</li>
<li>自动化测试和持续集成、发布</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用</li>
<li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境</li>
</ul>
<h2 id="golang为什么使用Docker作为容器"><a href="#golang为什么使用Docker作为容器" class="headerlink" title="golang为什么使用Docker作为容器"></a>golang为什么使用Docker作为容器</h2><p>多数Go应用程序时简单的二进制文件。这就引发一个问题为什么使用Docker运行一个Go应用程序？一些使用Docker运行Go的理由包<br>括：</p>
<ol>
<li>Web应用程序通常都有模版和配置文件。</li>
<li>Docker有助于保持这些文件与二进制文件的同步</li>
<li>Docker确保了在开发或生产中完全相同的配置。</li>
<li>很多时候当应用程序可以在开发环境中正常工作时，在生产环境去无法正常工作。使用DOcker则把你从对这些问题的担心中解放了出来。在一个大型的团队中主机、操作系统及所安装的软件可能存在很大的不同。Docker提供了一种机制来确保一致的开发环境配置。这将提升团队的生产力并且在开发阶段减少冲突和可避免问题的发生。</li>
</ol>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>我的电脑是Windows10，所以我在<a href="https://www.docker.com/docker-windows" target="_blank" rel="external">官网</a>下载了windows版本的docker安装包，下载好了以后，一直安装就可以了。有其他需求的同学可参考<a href="http://blog.csdn.net/tina_ttl/article/details/51372604" target="_blank" rel="external">windows下安装docker</a>有更多的说明。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ol>
<li>创建一个项目为hellodocker</li>
<li>创建一个main.go(没什么特别)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;net/http&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	http.HandleFunc(&quot;/&quot;, func(writer http.ResponseWriter, request *http.Request) &#123;</div><div class="line">		fmt.Fprint(writer,&quot;hello docker&quot;)</div><div class="line">	&#125;)</div><div class="line">	http.ListenAndServe(&quot;:8080&quot;,nil)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在项目的根目录创建一个叫dockerfile的文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># 得到最新的 golang docker 镜像</div><div class="line">FROM golang:latest</div><div class="line"></div><div class="line"># 在容器内部创建一个目录来存储我们的 web 应用，接着使它成为工作目录。</div><div class="line">RUN mkdir -p /go/src/go-mgox</div><div class="line"></div><div class="line">WORKDIR /go/src/GoMgo </div><div class="line"></div><div class="line"># 复制 web-app 目录到容器中</div><div class="line"></div><div class="line">COPY . /go/src/GoMgo</div><div class="line"># 下载并安装第三方依赖到容器中</div><div class="line"></div><div class="line">RUN go-wrapper download</div><div class="line">RUN go-wrapper install</div><div class="line"></div><div class="line"># 设置 PORT 环境变量</div><div class="line">ENV PORT 8080</div><div class="line"></div><div class="line"># 给主机暴露 8080 端口，这样外部网络可以访问你的应用</div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line"># 告诉 Docker 启动容器运行的命令</div><div class="line">CMD [&quot;go-wrapper&quot;, &quot;run&quot;]</div></pre></td></tr></table></figure>
<ol>
<li>构建镜像（这里可以使用镜像服务器，不然有点慢，但是我是没用上）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker build -t go-mgox .</div><div class="line">// . 是不能省略的</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/F89D4095189A4760942A6CD594644CF3?method=download&amp;shareKey=a9690d62b7c5199bf26892853b2839c1" alt="image"><br><strong>build的时候出现了Successfully build才表示成功</strong></p>
<ol>
<li>查看docker镜像 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/F44FED8EC3E54DCC8C8BD95B69E5893C?method=download&amp;shareKey=ad2e78e47a13e231db77040fdb4414ce" alt="image"></p>
<ol>
<li>开启docker（前台方式）<br>在命令行输入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8080:8080 hellodocker</div></pre></td></tr></table></figure>
<ul>
<li>docker run ：运行docker镜像 </li>
<li>-p 8080:8080 ：将宿主机（也就是本机）的8080端口映射到容器的8080端口，此处需要先确认本机的8080端口并未被占用，否则将无法开启 </li>
<li>hellodocker ：镜像名（也支持id）</li>
</ul>
<ol>
<li>开启docker（后台方式）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8080:8080 -d hellodocker</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/FED189A64D0B4A99891FC2966DCC83A4?method=download&amp;shareKey=1859ffce76968ea968dca78559b30121" alt="image"></p>
<p>说明开启成功，在浏览器中输入<a href="http://localhost:8080/,即可看到我们的返回内容" target="_blank" rel="external">http://localhost:8080/,即可看到我们的返回内容</a></p>
<ol>
<li>停止docker<br>停止和退出docker有两种方法，一个是kill另一个是stop </li>
</ol>
<ul>
<li>stop :系统先发送停止信号，有充分的时间（默认10s）完成清理后再发送kill信号让容器退出 </li>
<li>kill : 系统直接发送退出信号，让容器强制退出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker stop id</div><div class="line">或</div><div class="line">docker kill id</div></pre></td></tr></table></figure>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>镜像删除是一个比较复杂的操作</p>
<ol>
<li>查询镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/4DEA3979537849719CCA1D56410FC4A6?method=download&amp;shareKey=8af53955f8692eff6d7ba5bbb809199d" alt="image"><br>现在想删除第一个，ID为 ad981e05699d 的镜像。<br><img src="https://note.youdao.com/yws/api/personal/file/D4896F0F2D3F48EFAD7DB69A6B571906?method=download&amp;shareKey=f7fd511ac3725b0e1622a0696d0ddf12" alt="image"><br>从上面看出，需要先停到ID为 e4ebfe6be8d8 的容器。</p>
<ol>
<li>查询容器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/7DAD703CF75444E7B98EE1F4167E51D8?method=download&amp;shareKey=dad3de53b62480880b7feecb7bb15051" alt="image"></p>
<ol>
<li>先删除容器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm 容器id</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/6B8B2C40F3EA4B199EF59D49DA53E6EC?method=download&amp;shareKey=091142268c979d22279ee707344afa1c" alt="image"></p>
<ol>
<li>删除镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi 镜像id</div></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/3D81F21AD6644FC0A4B937023FC500A3?method=download&amp;shareKey=cf3e4733e4d3263abeb3fcc8bfa4fd1f" alt="image"></p>
<h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><ol>
<li><strong>删除前需要保证容器是停止的  stop</strong></li>
<li><strong>需要注意删除镜像和容器的命令不一样。 docker rmi ID  ,其中 容器(rm)  和 镜像(rmi)</strong></li>
<li><strong>顺序需要先删除容器</strong></li>
</ol>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本人也作为一个初学者，很多docker的只是还有待提高。</p>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下Mongodb安装及配置]]></title>
      <url>/2017/11/13/Windows%E4%B8%8BMongodb%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>安装文件：mongodb-win32-x86_64-2008plus-ssl-3.4.10-signed</li>
<li>电脑配置：win10 64位</li>
</ul>
<blockquote>
<p>MongoDB的安装很简单，设置好安装路径后，一直Next直到安装结束，最大的坑就是MongoDB服务的安装，下面具体说下MongoDB安装之后的一些配置操作(<strong>我的安装路径是：D:\Program Files\MongoDB\Server\3.4</strong>)</p>
</blockquote>
<ol>
<li>创建数据库路径（data目录）、日志路径（logs目录）和日志文件（mongo.log文件），完成后如下图所示<br><img src="http://note.youdao.com/yws/api/personal/file/EF90B287040C4FD2B28B805E4D8381DE?method=download&amp;shareKey=f9a0a0dee9d1b8063a939bf5652a7f73" alt="image"></li>
<li>创建配置文件mongo.conf，文件内容如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dbpath=D:\Program Files\MongoDB\Server\3.4\data #数据库路径</div><div class="line">logpath=D:\Program Files\MongoDB\Server\3.4\logs\mongo.log #日志输出文件路径</div><div class="line">logappend=true #错误日志采用追加模式</div><div class="line">journal=true #启用日志文件，默认启用</div><div class="line">quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</div><div class="line">port=27017 #端口号 默认为27017</div></pre></td></tr></table></figure>
<ol>
<li>启动MongoDB<blockquote>
<p>前两步操作完成后，就可以启动MongoDB了，首先进入D:\ProgramFiles\MongoDB\Server\3.4\bin（依安装目录而定）目录下，启动命令如下：</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config &quot;D:\Program Files\MongoDB\Server\3.4\mongo.conf&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>命令执行后，浏览器中输入<a href="http://127.0.0.1:27017看到如下界面即说明启动成功" target="_blank" rel="external">http://127.0.0.1:27017看到如下界面即说明启动成功</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/9B57F80D321143F3B8A25D62BEA2A36F?method=download&amp;shareKey=af5e0735f9cd532bee542fc333b07ab6" alt="image"></p>
<ol>
<li>创建并启动MongoDB服务</li>
</ol>
<blockquote>
<p>如果每次都按照步骤三那样操作，岂不是相当麻烦，按照如下命令来创建并启动MongoDB服务，就可以通过windows服务来管理MongoDB的启动和关闭了首先进入D:\Program Files\MongoDB\Server\3.4\bin（cmd用管理员身份运行。依安装目录而定）目录下，启动命令如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mongod --config &quot;D:\Program Files\MongoDB\Server\3.4\mongo.conf&quot; --install --serviceName &quot;MongoDB&quot;</div><div class="line">net start MongoDB</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/B2A4E4B9CB434886B292933F3C3E2F5A?method=download&amp;shareKey=752089fd71f51bbf3162471a5e9deea8" alt="image"></p>
<blockquote>
<p>如果需要卸载MongoDB服务，首先进入D:\Program Files\MongoDB\Server\3.2\bin（依安装目录而定）目录下，执行如下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --remove --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>至此，所有操作已完成，服务已成功安装。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Gilde基本使用]]></title>
      <url>/2017/11/06/Gilde%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Gilde"><a href="#Gilde" class="headerlink" title="Gilde"></a>Gilde</h2><blockquote>
<p><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Gilde</a>是google开源的图片加载库。其竞争对手主要是<a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a>、<a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a>。网上也有很多说这三大框架的。我就简单的说说好了。 Picasso所能实现的功能，Glide都能做，无非是所需的设置不同。但是Picasso体积比起Glide小太多如果项目中网络请求本身用的就是okhttp或者retrofit(本质还是okhttp)，那么建议用Picasso，体积会小很多(Square全家桶的干活)。Glide的好处是大型的图片流，比如gif、Video，如果你们是做美拍、爱拍这种视频类应用，建议使用。Fresco在5.0以下的内存优化非常好，代价就是体积也非常的大，按体积算Fresco&gt;Glide&gt;Picasso不过在使用起来也有些不便（小建议：他只能用内置的一个ImageView来实现这些功能，用起来比较麻烦，我们通常是根据Fresco自己改改，直接使用他的Bitmap层）。我自己呢？其实就是glide的重度使用者。glide从3.x到4.x也做了很大的变化。所以今天就简单的说说glide的基本使用情况(java和kotlin)</p>
</blockquote>
<h2 id="添加Glide依赖"><a href="#添加Glide依赖" class="headerlink" title="添加Glide依赖"></a>添加Glide依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//java</div><div class="line">compile &apos;com.github.bumptech.glide:glide:4.3.0&apos;</div><div class="line">annotationProcessor &apos;com.github.bumptech.glide:compiler:4.3.0&apos;</div><div class="line"></div><div class="line">//kotlin</div><div class="line">compile &apos;com.github.bumptech.glide:glide:4.3.0&apos;</div><div class="line">annotationProcessor &apos;com.github.bumptech.glide:compiler:4.3.0&apos;</div><div class="line">kapt &apos;com.github.bumptech.glide:compiler:4.3.0&apos;</div><div class="line">//如果情况特殊的话还需要加一个</div><div class="line">android&#123;</div><div class="line">    kapt &#123;</div><div class="line">        generateStubs = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Glide基础用法"><a href="#Glide基础用法" class="headerlink" title="Glide基础用法"></a>Glide基础用法</h2><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法."></a>基础用法.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private void baseUsed()&#123;</div><div class="line">    Glide.with(this)</div><div class="line">            .load(URL)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="glide-可以用RequestOptions配置各种参数"><a href="#glide-可以用RequestOptions配置各种参数" class="headerlink" title="glide 可以用RequestOptions配置各种参数"></a>glide 可以用RequestOptions配置各种参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void gildeOptions()&#123;</div><div class="line">    RequestOptions options = new RequestOptions();</div><div class="line">    options.centerCrop()</div><div class="line">            .placeholder(R.drawable.default_avatar)</div><div class="line">            .error(R.drawable.image_error)</div><div class="line">            .fallback(R.drawable.fallback_nodata);</div><div class="line"></div><div class="line">    Glide.with(this)</div><div class="line">            .load(URL)</div><div class="line">            .apply(options)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其中Built in types：</p>
<ul>
<li>CenterCrop：类似 ScaleType.CENTER_CROP</li>
<li>FitCenter： 类似 ScaleType.FIT_CENTER</li>
<li>CircleCrop： 圆形裁剪</li>
<li>placeholder： 占位即加载中的图片。</li>
<li>error： 错误图片</li>
<li>fallback： 当url为null的时候，判断是否设置了fallback，是的话则显示fallback图片，否的话显示error图片，如果error还是没有设置则显示placeholder图片.</li>
</ul>
</blockquote>
<h4 id="glide-RequestBuilders还可以重用开始多个加载"><a href="#glide-RequestBuilders还可以重用开始多个加载" class="headerlink" title="glide RequestBuilders还可以重用开始多个加载"></a>glide RequestBuilders还可以重用开始多个加载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private void multipleLoad()&#123;</div><div class="line"></div><div class="line">    RequestOptions options = new RequestOptions();</div><div class="line">    options.centerCrop()</div><div class="line">            .placeholder(R.drawable.default_avatar)</div><div class="line">            .error(R.drawable.image_error)</div><div class="line">            .fallback(R.drawable.fallback_nodata);</div><div class="line"></div><div class="line">    RequestBuilder&lt;Drawable&gt; requestBuilder =</div><div class="line">            Glide.with(this)</div><div class="line">                    .asDrawable().apply(options);</div><div class="line"></div><div class="line"></div><div class="line">    for(int i=0;i&lt;mImageGroup.getChildCount();i++)&#123;</div><div class="line">        ImageView view = (ImageView) mImageGroup.getChildAt(i);</div><div class="line">        requestBuilder.clone()</div><div class="line">                .load(urls[i])</div><div class="line">                .into(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AppGlideModule-用法"><a href="#AppGlideModule-用法" class="headerlink" title="AppGlideModule 用法"></a>AppGlideModule 用法</h2><blockquote>
<p>在glide4中引入 glideApp，通过annotation将option封装自动生成代码。但必须自定义一个module继承于AppGlideModule。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@GlideModule</div><div class="line">public final class MyGlideModule extends AppGlideModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： AppGlideModule实现必须始终与@GlideModule注释一起出现.如果注释不存在，则该模块将不会被发现。重新编译，会自动生成代码，后面可用GlideApp.with() 代替Glide.with()。当然也还有其他的配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//基本信息配置</div><div class="line">@Override</div><div class="line">public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">    MemorySizeCalculator calculator = new MemorySizeCalculator.Builder(context)</div><div class="line">            .setMemoryCacheScreens(2)</div><div class="line">            .build();</div><div class="line">    //设置手机默认推荐缓存大小</div><div class="line">    builder.setMemoryCache(new LruResourceCache(calculator.getMemoryCacheSize()));</div><div class="line">    // 自定义缓存大小.</div><div class="line">    int memoryCacheSizeBytes = 1024 * 1024 * 20; // 20mb</div><div class="line">    builder.setMemoryCache(new LruResourceCache(memoryCacheSizeBytes));</div><div class="line">    //自定义内置磁盘缓存大小(可以指明路径)</div><div class="line">    int diskCacheSizeBytes = 1024 * 1024 * 100; // 100 MB</div><div class="line">    builder.setDiskCache(new InternalCacheDiskCacheFactory(context, diskCacheSizeBytes));</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">//isManifestParsingEnabled 设置清单解析，设置为false，避免添加相同的modules两次</div><div class="line">@Override</div><div class="line">public boolean isManifestParsingEnabled() &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">override fun applyOptions(context: Context?, builder: GlideBuilder?) &#123;</div><div class="line">    val calculator =MemorySizeCalculator.Builder(context)</div><div class="line">            .setMemoryCacheScreens(2f)</div><div class="line">            .build()</div><div class="line">    builder?.setMemoryCache(LruResourceCache(calculator.memoryCacheSize))</div><div class="line">    val diskCacheSizeBytes = 1024 * 1024 * 100</div><div class="line">    builder?.setDiskCache(InternalCacheDiskCacheFactory(context,&quot;cacheFolderName&quot;,diskCacheSizeBytes))</div><div class="line">&#125;</div><div class="line"></div><div class="line">override fun isManifestParsingEnabled(): Boolean &#123;</div><div class="line">    return false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GlideApp用法"><a href="#GlideApp用法" class="headerlink" title="GlideApp用法"></a>GlideApp用法</h2><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private void gildeAppUsed()&#123;</div><div class="line">    GlideApp.with(this)</div><div class="line">            .load(URL1)</div><div class="line">            .placeholder(R.drawable.default_avatar)</div><div class="line">            .error(R.drawable.image_error)</div><div class="line">            .fallback(R.drawable.fallback_nodata)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置完全缓存"><a href="#设置完全缓存" class="headerlink" title="设置完全缓存"></a>设置完全缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void diskCacheStrategyAll()&#123;</div><div class="line">    GlideApp.with(this)</div><div class="line">            .asBitmap()</div><div class="line">            .load(URL)</div><div class="line">            .placeholder(R.drawable.default_avatar)</div><div class="line">            .error(R.drawable.image_error)</div><div class="line">            .fallback(R.drawable.fallback_nodata)</div><div class="line">            .diskCacheStrategy(DiskCacheStrategy.ALL)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>DiskCacheStrategy.NONE 不做磁盘缓存</li>
<li>DiskCacheStrategy.SOURCE 只缓存图像原图</li>
<li>DiskCacheStrategy.RESULT 只缓存加载后的图像，即处理后最终显示时的图像</li>
<li>DiskCacheStrategy.ALL 缓存所有版本的图像（默认行为）</li>
</ul>
<h4 id="只从缓存中读取，如果缓存没有，则失败"><a href="#只从缓存中读取，如果缓存没有，则失败" class="headerlink" title="只从缓存中读取，如果缓存没有，则失败."></a>只从缓存中读取，如果缓存没有，则失败.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void retrieveFromCache()&#123;</div><div class="line">    GlideApp.with(this)</div><div class="line">            .asBitmap()</div><div class="line">            .load(URL)</div><div class="line">            .placeholder(R.drawable.default_avatar)</div><div class="line">            .error(R.drawable.image_error)</div><div class="line">            .fallback(R.drawable.fallback_nodata)</div><div class="line">            .onlyRetrieveFromCache(true)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="跳过缓存-每次都从服务端获取最新"><a href="#跳过缓存-每次都从服务端获取最新" class="headerlink" title="跳过缓存. 每次都从服务端获取最新."></a>跳过缓存. 每次都从服务端获取最新.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 跳过缓存. 每次都从服务端获取最新.</div><div class="line"> * diskCacheStrategy: 磁盘缓存</div><div class="line"> * skipMemoryCache:内存缓存</div><div class="line"> */</div><div class="line">private void skipCache()&#123;</div><div class="line">    GlideApp.with(this)</div><div class="line">            .asBitmap()</div><div class="line">            .load(URL)</div><div class="line">            .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">            .skipMemoryCache(true)</div><div class="line">            .into(mImageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 清除内存缓存.</div><div class="line"> */</div><div class="line">private void clearMemoryCache()&#123;</div><div class="line">    // This method must be called on the main thread.</div><div class="line">    Glide.get(this).clearMemory();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 清除磁盘缓存.</div><div class="line"> */</div><div class="line">private void clearDiskCache()&#123;</div><div class="line"></div><div class="line">    new AsyncTask&lt;Void,Void,Void&gt;()&#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        protected Void doInBackground(Void... params) &#123;</div><div class="line">            // This method must be called on a background thread.</div><div class="line">            Glide.get(getApplicationContext()).clearDiskCache();</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang-RPC]]></title>
      <url>/2017/10/12/Golang-RPC/</url>
      <content type="html"><![CDATA[<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><blockquote>
<p>RPC(Remote Procedure Call Protocol)–远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。他假定某些传输协议的存在，如TCP或UDP，以便为通信程序之间携带信息数据。通过它可以使函数调用模式网络化。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。RPC就是想实现函数调用模式的网络化。客户端就像调用本地函数一样，然后客户端把这些参数打包之后通过网络传递到服务端，服务端解包到处理过程中执行，然后执行的结果反馈给客户端。</p>
</blockquote>
<h3 id="RPC工作流程"><a href="#RPC工作流程" class="headerlink" title="RPC工作流程"></a>RPC工作流程</h3><ol>
<li>调用客户端句柄；执行传送参数</li>
<li>调用本地系统内核发送网络消息</li>
<li>消息传送到远程主机</li>
<li>服务器句柄得到消息并取得参数</li>
<li>执行远程过程</li>
<li>执行的过程将结果返回服务器句柄</li>
<li>服务器句柄返回结果，调用远程系统内核</li>
<li>消息传回本地主机</li>
<li>客户句柄由内核接收消息</li>
<li>客户接收句柄返回的数据</li>
</ol>
<p><img src="http://images.cnitblog.com/blog/120296/201502/171533136117355.png" alt="image"></p>
<h3 id="Go-RPC工作流程"><a href="#Go-RPC工作流程" class="headerlink" title="Go RPC工作流程"></a>Go RPC工作流程</h3><blockquote>
<p>Go标准包中已经提供了对RPC的支持，而且支持三个级别的RPC：TCP、HTTP、JSONRPC。但Go的RPC包是独一无二的，他和传统的RPC系统不同，他支持Go开发的服务器与客户端之间的交互。因为在内部，他们采用了Gob来编码。Go RPC 的函数只有符合下面的条件才能被远程访问，不然会被忽略，详细的要求如下：</p>
</blockquote>
<ul>
<li>函数必须是导出的(首字母大写)</li>
<li>必须有两个导出类型的参数</li>
<li>第一个参数是接收的参数，第二个参数是返回给客户端的参数，第二个参数必须是指针类型的</li>
<li>函数还要有一个返回值Error</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func (t *T)MethodName(argType T1,replType *T2) error</div><div class="line">//T、T1和T2类型必须能被encoding/gob包编解码</div></pre></td></tr></table></figure>
<blockquote>
<p>任何的RPC都需要通过网络来传递数据，Go RPC可以利用Http和TCP来传递数据，利用Http的好处是可以直接复用net/http里面的一些函数。例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;errors&quot;</div><div class="line">	&quot;net/rpc&quot;</div><div class="line">	&quot;net/http&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Arith int</div><div class="line"></div><div class="line">func (t *Arith) Multiply(args *Args, reply *int) error &#123;</div><div class="line">	log.Println(&quot;some body call me multiply&quot;)</div><div class="line">	*reply = args.A * args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (t *Arith) Divide(args *Args, quo *Quotient) error &#123;</div><div class="line">	if args.B == 0 &#123;</div><div class="line">		return errors.New(&quot;divide by zero&quot;)</div><div class="line">	&#125;</div><div class="line">	log.Println(&quot;some body call me divide&quot;)</div><div class="line">	quo.Quo = args.A / args.B</div><div class="line">	quo.Rem = args.A % args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	arith := new(Arith)</div><div class="line">	rpc.Register(arith)</div><div class="line">	rpc.HandleHTTP()</div><div class="line">	err := http.ListenAndServe(&quot;:1234&quot;, nil)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过上面的例子可以看到，我们注册了一个Arith的RPC服务，然后通过rpc.HandleHTTP函数把该服务注册到了Http协议上，然后我们就可以利用http的方式来传递数据了。客户端代码如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;net/rpc&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	client , err := rpc.DialHTTP(&quot;tcp&quot;,&quot;127.0.0.1:1234&quot;)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;dialing:&quot;,err)</div><div class="line">	&#125;</div><div class="line">	args :=Args&#123;17,8&#125;</div><div class="line">	var reply int</div><div class="line">	err = client.Call(&quot;Arith.Multiply&quot;,args,&amp;reply)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;arith multiply error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d * %d = %d&quot;, args.A, args.B, reply)</div><div class="line"></div><div class="line">	var quot Quotient</div><div class="line"></div><div class="line">	err = client.Call(&quot;Arith.Divide&quot;,args,&amp;quot)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;arith divide error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d / %d = %d remainder %d&quot;, args.A, args.B, quot.Quo, quot.Rem)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面我们实现了基于HTTP协议的RPC，接下来我们要实现基于TCP协议的RPC，服务端的代码如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;errors&quot;</div><div class="line">	&quot;net/rpc&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">	&quot;net&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Arith int</div><div class="line"></div><div class="line">func (t *Arith) Multiply(args *Args, reply *int) error &#123;</div><div class="line">	log.Println(&quot;some body call me multiply&quot;)</div><div class="line">	*reply = args.A * args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (t *Arith) Divide(args *Args, quo *Quotient) error &#123;</div><div class="line">	if args.B == 0 &#123;</div><div class="line">		return errors.New(&quot;divide by zero&quot;)</div><div class="line">	&#125;</div><div class="line">	log.Println(&quot;some body call me divide&quot;)</div><div class="line">	quo.Quo = args.A / args.B</div><div class="line">	quo.Rem = args.A % args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	arith := new(Arith)</div><div class="line">	rpc.Register(arith)</div><div class="line">	tcpAddr, err := net.ResolveTCPAddr(&quot;tcp&quot;, &quot;:1234&quot;)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	listener, err := net.ListenTCP(&quot;tcp&quot;, tcpAddr)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">	&#125;</div><div class="line">	for &#123;</div><div class="line">		conn, err := listener.Accept()</div><div class="line">		if err != nil &#123;</div><div class="line">			fmt.Println(err.Error())</div><div class="line">			continue</div><div class="line">		&#125;</div><div class="line">		rpc.ServeConn(conn)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面这个代码和http的服务相比，不同在于：在此处我们采用了TCP协议，然后需要自己控制连接，当有客户连接上来后，需要我们把这个链接交给rpc来处理。如果你留心了，你会发现这他是一个阻塞的单用户的程序，如果想要实现多并发，那么可以使用goroutine来实现。而TCP协议的RPC客户端代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;net/rpc&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	client , err := rpc.Dial(&quot;tcp&quot;,&quot;127.0.0.1:1234&quot;)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;dialing:&quot;,err)</div><div class="line">	&#125;</div><div class="line">	args :=Args&#123;17,8&#125;</div><div class="line">	var reply int</div><div class="line">	err = client.Call(&quot;Arith.Multiply&quot;,args,&amp;reply)</div><div class="line">	if err !=nil&#123;</div><div class="line">	log.Fatal(&quot;arith multiply error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d * %d = %d&quot;, args.A, args.B, reply)</div><div class="line"></div><div class="line">	var quot Quotient</div><div class="line"></div><div class="line">	err = client.Call(&quot;Arith.Divide&quot;,args,&amp;quot)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;arith divide error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d / %d = %d remainder %d&quot;, args.A, args.B, quot.Quo, quot.Rem)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个客户端代码和http的客户端相比，唯一的区别一个是DialHTTP，一个是DIAL，其他处理都是一样的。</p>
</blockquote>
<h3 id="JSON-RPC"><a href="#JSON-RPC" class="headerlink" title="JSON RPC"></a>JSON RPC</h3><blockquote>
<p>JSON RPC是数据编码采用了JSON，而不是gob编码。其他和上面介绍的PRC概念一模一样，下面我们来演示一下，如何使用Go提供的json-rpc标准包，请看服务端代码的实现：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;errors&quot;</div><div class="line">	&quot;net/rpc&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;log&quot;</div><div class="line">	&quot;net&quot;</div><div class="line">	&quot;net/rpc/jsonrpc&quot;</div><div class="line">	&quot;os&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Arith int</div><div class="line"></div><div class="line">func (t *Arith) Multiply(args *Args, reply *int) error &#123;</div><div class="line">	log.Println(&quot;some body call me multiply&quot;)</div><div class="line">	*reply = args.A * args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (t *Arith) Divide(args *Args, quo *Quotient) error &#123;</div><div class="line">	if args.B == 0 &#123;</div><div class="line">		return errors.New(&quot;divide by zero&quot;)</div><div class="line">	&#125;</div><div class="line">	log.Println(&quot;some body call me divide&quot;)</div><div class="line">	quo.Quo = args.A / args.B</div><div class="line">	quo.Rem = args.A % args.B</div><div class="line">	return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	arith := new(Arith)</div><div class="line">	rpc.Register(arith)</div><div class="line">	tcpAddr, err := net.ResolveTCPAddr(&quot;tcp&quot;, &quot;:1234&quot;)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">		os.Exit(1)</div><div class="line">	&#125;</div><div class="line">	listener, err := net.ListenTCP(&quot;tcp&quot;, tcpAddr)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Println(err.Error())</div><div class="line">		os.Exit(1)</div><div class="line">	&#125;</div><div class="line">	for &#123;</div><div class="line">		conn, err := listener.Accept()</div><div class="line">		if err != nil &#123;</div><div class="line">			fmt.Println(err.Error())</div><div class="line">			continue</div><div class="line">		&#125;</div><div class="line">		jsonrpc.ServeConn(conn)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过案例我们可以看出 json-rpc是基于TCP协议实现的，目前他还不支持HTTP方式。那我们在看看客户端的实现：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;log&quot;</div><div class="line">	&quot;net/rpc/jsonrpc&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Args struct &#123;</div><div class="line">	A, B int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Quotient struct &#123;</div><div class="line">	Quo, Rem int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	client , err := jsonrpc.Dial(&quot;tcp&quot;,&quot;127.0.0.1:1234&quot;)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;dialing:&quot;,err)</div><div class="line">	&#125;</div><div class="line">	args :=Args&#123;17,8&#125;</div><div class="line">	var reply int</div><div class="line">	err = client.Call(&quot;Arith.Multiply&quot;,args,&amp;reply)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;arith multiply error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d * %d = %d&quot;, args.A, args.B, reply)</div><div class="line"></div><div class="line">	var quot Quotient</div><div class="line"></div><div class="line">	err = client.Call(&quot;Arith.Divide&quot;,args,&amp;quot)</div><div class="line">	if err !=nil&#123;</div><div class="line">		log.Fatal(&quot;arith divide error : &quot;,err)</div><div class="line">	&#125;</div><div class="line">	log.Printf(&quot;Arith: %d / %d = %d remainder %d&quot;, args.A, args.B, quot.Quo, quot.Rem)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang-基础]]></title>
      <url>/2017/09/29/Golang-%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="Go的特点"><a href="#Go的特点" class="headerlink" title="Go的特点"></a>Go的特点</h2><ol>
<li>类型安全和内存安全</li>
<li>以非常直观和极低代价的方案实现高并发</li>
<li>高效的垃圾回收机制</li>
<li>快速编译</li>
<li>为多核计算机提供性能提升的方案</li>
<li>支持UTF-8编码</li>
</ol>
<h2 id="Go本地官网"><a href="#Go本地官网" class="headerlink" title="Go本地官网"></a>Go本地官网</h2><blockquote>
<p>godoc -http=:8080 然后访问<a href="http://localhost:8080/" target="_blank" rel="external">官网</a>也就是<a href="http://localhost:8080/就可以查看所有文档了" target="_blank" rel="external">http://localhost:8080/就可以查看所有文档了</a></p>
</blockquote>
<h2 id="Go关键字"><a href="#Go关键字" class="headerlink" title="Go关键字"></a>Go关键字</h2><blockquote>
<p>break、default、func、interace、select、case、defer、go、map、struct、chan、else、goto、package、switch、const、fallthrough、if、range、type、continue、for、import、return、var</p>
</blockquote>
<h2 id="Go的可见性规则"><a href="#Go的可见性规则" class="headerlink" title="Go的可见性规则"></a>Go的可见性规则</h2><blockquote>
<p>Go语言中，使用大小写来决定常量、变量、类型、接口、结构的可见性。其中首字母小写即为private，首字母大写为public，需要注意的是，在Golang中可以用中文作为类型或者变量名，但是不建议使用。</p>
</blockquote>
<h2 id="Go的基本数据类型"><a href="#Go的基本数据类型" class="headerlink" title="Go的基本数据类型"></a>Go的基本数据类型</h2><table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
<th>注意事项</th>
</tr>
</thead>
<tbody>
<tr>
<td>布尔型(bool)</td>
<td>1字节</td>
<td>不可用数字代表true或者false</td>
</tr>
<tr>
<td>整型(int/uint)</td>
<td>根据运行平台可能为32或63位</td>
<td></td>
</tr>
<tr>
<td>8位整型(int8/uint8)</td>
<td>1字节</td>
<td>取值范围为-128~127/0~255</td>
</tr>
<tr>
<td>16位整型(int16/uint16)</td>
<td>2字节</td>
<td>取值范围为-32768~32767/0~65535</td>
</tr>
<tr>
<td>32位整型(int32=rune/uint32)</td>
<td>4字节</td>
<td>取值范围为-2^32/2~2^32/2-1/0~2^32-1</td>
</tr>
<tr>
<td>64位整型(int64/uint64)</td>
<td>8字节</td>
<td>取值范围为-2^62/2~@^64/2-1/0~2^64-1</td>
</tr>
<tr>
<td>浮点型(float32/float64)</td>
<td>4/8字节</td>
<td>精确到7/15小数位</td>
</tr>
<tr>
<td>字节型(byte)</td>
<td>1字节</td>
<td>别名uint8</td>
</tr>
<tr>
<td>复数(complex64/complex128)</td>
<td>8/16字节</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="在Golang中还有其他数据类型："><a href="#在Golang中还有其他数据类型：" class="headerlink" title="在Golang中还有其他数据类型："></a>在Golang中还有其他数据类型：</h4><ol>
<li>足够保存指针的32或64位整数型：uniptr</li>
<li>array、struct、string</li>
<li>slice、map、chan</li>
<li>接口与函数</li>
</ol>
<h4 id="变量声明与赋值"><a href="#变量声明与赋值" class="headerlink" title="变量声明与赋值"></a>变量声明与赋值</h4><table>
<thead>
<tr>
<th>操作</th>
<th>表达式</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>变量的申明格式</td>
<td>var 变量名称 数据类型</td>
<td>var name string</td>
</tr>
<tr>
<td>变量的赋值格式</td>
<td>变量名称 = 表达式</td>
<td>name = “jaychou”</td>
</tr>
<tr>
<td>变量的申明赋值格式</td>
<td>var 变量名称 [数据类型]=表达式</td>
<td>var name [string] = “jaychou”</td>
</tr>
<tr>
<td>最简化的申明赋值格式</td>
<td>变量名 := 表达式</td>
<td>name := “jaychou”</td>
</tr>
<tr>
<td>多个变量的申明</td>
<td>变量名，变量名…:=表达式，表达式…</td>
<td>aa,bb := 1,”我是你爸爸”</td>
</tr>
</tbody>
</table>
<h4 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h4><blockquote>
<p>Go中不存在隐式转换，所有类型转换必须显示申明，转换只能发生在两种数据相互兼容的类型之间，如：<vaulea>[:]=<typeofvaluea>(<valueb>)。这里需要注意的是string()表示将数据转化成文本格式，因为计算机中存储的任何东西本质都是数字，因此string(65)这种会转变成相对于的字母A，这种我们想要得到”65”则需要strconv.Itoa(65)</valueb></typeofvaluea></vaulea></p>
</blockquote>
<h2 id="计数器iota"><a href="#计数器iota" class="headerlink" title="计数器iota"></a>计数器iota</h2><blockquote>
<p>iota是常量的计数器，从0开始，组中每定义1个常量就自动递增1，通过iota与初始化规则可以大到枚举的效果：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const(</div><div class="line">    //第一个常量不可省略表达式</div><div class="line">    Monday = iota</div><div class="line">    Tuesady</div><div class="line">    Webnesday</div><div class="line">    Thursday</div><div class="line">    Friday</div><div class="line">    Saturday</div><div class="line">    Sunday</div><div class="line">)</div><div class="line"></div><div class="line">//结果是0-6</div><div class="line"></div><div class="line">const (</div><div class="line">	xa =&quot;A&quot;</div><div class="line">	xb</div><div class="line">	xc = iota</div><div class="line">	xd</div><div class="line">)</div><div class="line">// 结果是 A A 2 3</div></pre></td></tr></table></figure>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote>
<p>Go中的运算符均是从左至右结合。其优先级如下：</p>
</blockquote>
<ol>
<li>^ !</li>
<li><ul>
<li>/ % &lt;&lt; &gt;&gt; &amp; &amp;^</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>| ^</li>
</ul>
</li>
</ul>
</li>
<li>== != &lt; &lt;= &gt;= &gt;</li>
<li>&lt;-</li>
<li>&amp;&amp;</li>
<li>||</li>
</ol>
<blockquote>
<p>其中有四个符号位运算要注意</p>
</blockquote>
<table>
<thead>
<tr>
<th>数据/符号</th>
<th>二进制/结果</th>
<th>原理说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>0110</td>
</tr>
<tr>
<td>11</td>
<td>1011</td>
</tr>
<tr>
<td>&amp;</td>
<td>0010</td>
<td>两位同时为1结果就为1</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>1111</td>
<td>其中一位为1结果就为1</td>
</tr>
<tr>
<td>^</td>
<td>1101</td>
<td>两位其中一个为1结果就为1</td>
</tr>
<tr>
<td>&amp;^</td>
<td>0100</td>
<td>如果第二个数为1就要把第一个数的同位数改成0</td>
</tr>
</tbody>
</table>
<h2 id="判断语句-if"><a href="#判断语句-if" class="headerlink" title="判断语句 if"></a>判断语句 if</h2><ul>
<li>条件表达式没有括号</li>
<li>支持一个初始化表达式(可以是并行方式)</li>
<li>左大括号必须和条件语句或else在同一行</li>
<li>支持单行模式</li>
<li>初始化语句中的变量为block级别，同时隐藏外部同名变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">func main() &#123;</div><div class="line">	a := true</div><div class="line">	if a, b, c := 1, 2, 3; a+b+c &gt; 6 &#123;</div><div class="line">		fmt.Println(&quot;大于6&quot;)</div><div class="line">	&#125; else &#123;</div><div class="line">		fmt.Println(&quot;小于等于6&quot;)</div><div class="line">		fmt.Println(a)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句 for"></a>循环语句 for</h2><ul>
<li>Go只有for一个循环语句关键字。支持3种形式</li>
<li>初始化和进步表达式可以是多个值</li>
<li>条件语句每次循环都会被重新检查，因此不建议在条件语句中使用函数，尽量提前计算好条件并以变量或常量代替</li>
<li>左大括号必须和条件语句在同一行</li>
</ul>
<p><img src="http://note.youdao.com/yws/api/personal/file/FE8CCA1B54AF456FB47C04610C18C78D?method=download&amp;shareKey=55eb141e3e1be970cf85e7a2e3855f7f" alt="image"></p>
<h2 id="选择语句-switch"><a href="#选择语句-switch" class="headerlink" title="选择语句 switch"></a>选择语句 switch</h2><ul>
<li>可以使用任何类型或表达式作为条件语句</li>
<li>不需要写break，一旦条件符合自动终止</li>
<li>如果希望继续执行下一个case，需要使用fallthrough语句</li>
<li>支持一个初始化表达式，右侧需要分号隔开</li>
<li>左大括号必须和条件语句在同一行</li>
</ul>
<p><img src="http://note.youdao.com/yws/api/personal/file/ED41A8007FF0445F98CBEE5B80E4C16F?method=download&amp;shareKey=91a1d737b56d4b2026368cb729f8bc51" alt="image"></p>
<h2 id="跳转语句-goto-、break、continue"><a href="#跳转语句-goto-、break、continue" class="headerlink" title="跳转语句 goto 、break、continue"></a>跳转语句 goto 、break、continue</h2><ul>
<li>三个语法都可以配合标签使用</li>
<li>标签区分大小写，若不使用会造成编译出错</li>
<li>break与continue配合标签可用于多层循环的跳出</li>
<li>goto是调整试行位置，与其他两个语句标签的结果不相同</li>
</ul>
<p><img src="http://note.youdao.com/yws/api/personal/file/0FC3893FA77D4361ADA0703A54216091?method=download&amp;shareKey=9a281be9e9ae63027c03d76c09dc11c3" alt="image"></p>
<blockquote>
<p>需要注意的是：goto的标签一般放在循环后面，而continue需要是在有限循环中</p>
</blockquote>
<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><ul>
<li>定义数组的格式：var 变量名 [长度]类型 =&gt; var array []int | array :=[10]int{}</li>
<li>数组长度也是类型的一部分，因此具有不同长度的数组为不同类型</li>
<li>注意区分指向数组的指针和指针数组</li>
<li>数组在Go中为值类型，比较用==或者!=。而且比较严格，长度要一致，数据类型要一直才能比较</li>
<li>可以使用new来创建数组，次方法返回一个指向数组的指针</li>
<li>Go支持多维数组</li>
</ul>
<h2 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h2><ul>
<li>其自身不是数组，它指向底层的数组</li>
<li>作为变长数组的替代方案，可以关联底层数组的局部或全部</li>
<li>Slice为引用类型，可以直接创建或从底层数组获取生成</li>
<li>使用len()获取元素个数，cap()获取容量大小</li>
<li>一般使用make()创建。make([]T,len,cap)，len表示元素个数，cap表示容量，如果cap省略，则和len的值相同。cap是翻倍增加</li>
<li><p>如果多个slice指向相同底层数组，其中一个的值改变会影响全部</p>
</li>
<li><p>append函数会改变slice所引用的数组的内容，从而影响到引用同一数组的其它slice。 但当slice中没有剩<br>余空间（即(cap-len) == 0）时，此时将动态分配新的数组空间。返回的slice数组指针将指向这个空间，而原<br>数组的内容将保持不变；其它引用此数组的slice则不受影响。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var array = [10]byte&#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;&#125;</div><div class="line">aSlice := array[:3]</div><div class="line">fmt.Println(len(aSlice),cap(aSlice),cap(array))</div><div class="line">aSlice = array[3:7]</div><div class="line">fmt.Println(len(aSlice),cap(aSlice),cap(array))</div><div class="line"></div><div class="line">//结果可以看出如果是从array中获取得到的Slice，Slice的cap将是array的cap减去Slice的起始下标</div></pre></td></tr></table></figure>
<h2 id="集合-Map"><a href="#集合-Map" class="headerlink" title="集合 Map"></a>集合 Map</h2><ul>
<li>类似其他语言中的哈希表或者字典，以key-value形式存储数据</li>
<li>Key必须是支持==或者!=比较运算的类型，不可以是函数、map或者slice</li>
<li>Map查找比线性搜索快很多，但比使用索引访问数据的类型慢100倍</li>
<li>Map使用make()创建，支持:=这种简写方式。make([keyType]valueType,cap),cap表示容量，可省略，超出容量会自动扩容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Map集合的遍历</div><div class="line"></div><div class="line">for index, value := range m &#123;</div><div class="line">	fmt.Println(index, value)</div><div class="line">&#125;</div><div class="line"></div><div class="line">for index :=range m&#123;</div><div class="line">	fmt.Println(index)</div><div class="line">&#125;</div><div class="line"></div><div class="line">for _,value :=range m&#123;</div><div class="line">	fmt.Println(value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数function"><a href="#函数function" class="headerlink" title="函数function"></a>函数function</h2><blockquote>
<p>Go的函数<strong>不支持嵌套、重装、默认参数</strong> ,但Go的函数有无需声明原形、不定长度变参、多返回值、命名返回值参数匿名函数、闭包的特点，而且函数也可以作为一种类型使用。基本类型在函数中修改值不影响函数调用处的值，</p>
</blockquote>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ul>
<li>defer的执行方式类似其他语言中的析构函数，在函数体执行结束后按照调用顺序的相反顺序逐个执行</li>
<li>即时函数发生严重错误也会执行</li>
<li>支持匿名函数的调用</li>
<li>常用于资源管理、文件关闭、解锁以及记录时间等操作</li>
<li>通过与匿名函数可在return之后修改函数计算结果</li>
<li>如果函数体内某个变量作为defer时，匿名函数的参数，则在定义defer时已经获得了拷贝，否则则是引用某个变量的地址</li>
<li>Go没有异常机制，但有panic/recover模式来处理错误</li>
<li>Panic可以再任何地方发，但recover只有在defer调用的函数中有效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//panic捕获，一般是defer来捕获，而且一般是放在发生错误的前面</div><div class="line">func pb() &#123;</div><div class="line">	defer func() &#123;</div><div class="line">		if error := recover(); error != nil &#123;</div><div class="line">			fmt.Println(&quot;recover in B&quot;)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	panic(&quot;panic in b&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构struct"><a href="#结构struct" class="headerlink" title="结构struct"></a>结构struct</h2><ul>
<li>Go中的struct与C中的struct非常相似，并且Go没有class</li>
<li>使用 type 名称 struct{}定义结构，名称遵循可见性规则</li>
<li>支持指向自身的指针类型成员</li>
<li>支持匿名结构，可用作成员或定义成员变量</li>
<li>匿名结构也可以用于map的值</li>
<li>可以使用字面值对结构体进行初始化</li>
<li>允许直接通过指针来读写结构成员</li>
<li>相同类型的成员可进行直接拷贝赋值</li>
<li>支持==与!= 比较运算，但不支持&gt;或&lt;</li>
<li>支持匿名字段，本质上是定义了以某个类型为名称的字段</li>
<li>嵌入结构作为匿名字段看起来像继承，但Go中没有继承的概念</li>
<li>可以使用匿名字段指针</li>
</ul>
<h2 id="方法method"><a href="#方法method" class="headerlink" title="方法method"></a>方法method</h2><ul>
<li>Go中虽然没有class，但依旧有method</li>
<li>通过显示说明receiver来实现与某个类型的组合</li>
<li>只能为同一个包中的类型定义方法</li>
<li>receiver可以是类型的值或者指针</li>
<li>不存在方法重载</li>
<li>可以使用值或者指针来调用方法，编译器会自动完成转换</li>
<li>从某种意义上来说，方法时函数的语法糖，因为receiver其实就是方法所接收的第一个参数</li>
<li>如果外部结构和嵌入结构存在同名方法，则优先调用外部结构的方法</li>
<li>类型别名不会拥有底层类型所附带的方法</li>
<li>方法可以调用结构中的非公开字段</li>
<li>在方法中修改结构的属性，如果不是使用的*方式的话，调用处的结构不会发生变化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//创建结构</div><div class="line">type ma struct &#123;</div><div class="line">	name string</div><div class="line">&#125;</div><div class="line"></div><div class="line">//为某个结构添加方法</div><div class="line">func (ma ma) print() &#123;</div><div class="line">	fmt.Println(&quot;this is my first method&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h2><ul>
<li>接口是一个或多个方法签名的集合</li>
<li>只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示声明实现了那个接口，这成为Structural Typing</li>
<li>接口只有方法的生命，没有实现，也没有数据字段</li>
<li>接口可以匿名嵌入其他接口，或嵌入到结构中</li>
<li>将对象赋值给接口时，会发生拷贝，而接口内部存储的是指向这个复制品的指针，既无法修改复制的状态，也无法获取指针</li>
<li>只有当接口存储的类型和对象都为nil时，接口才等于nil</li>
<li>接口同样支持匿名字段方法</li>
<li>接口可以实现类似OOP中的多态</li>
<li>空接口可以作为任何类型数据的容器</li>
</ul>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ol>
<li>通过类型断言的ok pattern可以判断接口中的数据类型</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func disConnect(usb Usb) &#123;</div><div class="line">	//利用ok pattern进行类型检查</div><div class="line">	if pc, ok := usb.(PhoneConnecter); ok &#123;</div><div class="line">		fmt.Println(&quot;disConnect&quot;, pc.name)</div><div class="line">		return</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(&quot;UnKnown decive&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用type switch则可针对空接口进行比较全面的类型判断</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//利用空接口来进行类型检查</div><div class="line">func disConnect(usb interface&#123;&#125;) &#123;</div><div class="line">	//利用type switch 类型检查</div><div class="line">	switch target := usb.(type) &#123;</div><div class="line">	case PhoneConnecter:</div><div class="line">		fmt.Println(&quot;disConnect&quot;, target.name)</div><div class="line">	case TvConnecter:</div><div class="line">		fmt.Println(&quot;disConnect&quot;, target.name)</div><div class="line">	default:</div><div class="line">		fmt.Println(&quot;UnKnown decive&quot;)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="并发concurrency"><a href="#并发concurrency" class="headerlink" title="并发concurrency"></a>并发concurrency</h2><blockquote>
<p>很多人都是冲着Go大肆宣扬的高并发而忍不住跃跃欲试，但其实从源码的解析来看，goroutine只是由官方实现的超级线程池而已。不过话说回来，每个实例4-5kb的栈内存占用和由于实现机制而大幅减少的创建和销毁开销，是制造G号称的高并发的根本原因。另外goroutine的简单医用，也在语言层面给予了开发者巨大的便利。goroutine奉行通过通信来共享内存，而不是共享内存来通信。</p>
</blockquote>
<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><ul>
<li>Channel是goroutine沟通的桥梁，大都是阻塞同步的</li>
<li>通过make创建，close关闭</li>
<li>Channel是引用类型</li>
<li>可以使用 for range来迭代不断操作Channel</li>
<li>可以设置单向和双向通信</li>
<li>可以设置缓存大小，在未被填满前不会发生线程阻塞（即异步）</li>
</ul>
<h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><ul>
<li>可以处理一个或者多个channel的发送与接收</li>
<li>同时有多个可用的channel时按随机顺序处理</li>
<li>可用空的select来阻塞main函数</li>
<li>可设置超时</li>
</ul>
<h2 id="make、、new操作"><a href="#make、、new操作" class="headerlink" title="make、、new操作"></a>make、、new操作</h2><blockquote>
<p>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。<br>内建函数new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其<br>地址，即一个<em>T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。有一点非常重要：<br>new返回指针。<br>内建函数make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初<br>始值(非零)的T类型，而不是</em>T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被<br>初始化。例如，一个slice，是一个包含指向数据（内部array）的指针、长度和容量的三项描述符；在这些项目被<br>初始化之前，slice为nil。对于slice、map和channel来说，make初始化了内部的数据结构，填充适当的值。<br>make返回初始化后的（非零）值。</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p><strong>main package 中有多个go文件的时候，请用go run xx.go xx.go</strong></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java-Thread]]></title>
      <url>/2017/05/17/Java-Thread/</url>
      <content type="html"><![CDATA[<blockquote>
<p>多线程一直是Java开发中的一个重点。之前自己也没有怎么理解。最近又在看多线程这一块，所以就对Concurrent包中的类和接口做了一下简单的梳理。</p>
<p>Concurrent包是Jdk 1.5才出来的一个新的线程工具，它有效的减少竞争条件（race conditions）和死锁线程。concurrent包很好的解决了这些问题，为我们提供了更实用的并发程序模型。其结构图为：<br><img src="/assets/Concurrent.jpg" alt=""></p>
</blockquote>
<h2 id="常用类定义"><a href="#常用类定义" class="headerlink" title="常用类定义"></a>常用类定义</h2><ol>
<li>Executor: 具体Runnable任务的执行者</li>
<li>ExecutorService: 个线程池管理者，其实现类有多种。我们能把Runnable,Callable提交到池中让其调度。</li>
<li>Semaphore: 一个计数信号量。</li>
<li>ReentrantLock: 个可重入的互斥锁定 Lock，功能类似synchronized，但要强大的多。</li>
<li>Future: 是与Runnable,Callable进行交互的接口，比如一个线程执行结束后取返回的结果等等，还提供了cancel终止线程</li>
<li>BlockingQueue: 阻塞队列。</li>
<li>CompletionService: ExecutorService的扩展，可以获得线程执行结果。</li>
<li>CountDownLatch: 一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 </li>
<li>CyclicBarrier:  一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点。</li>
<li>Future: 表示异步计算的结果。</li>
<li>ScheduledExecutorService: 一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令。</li>
</ol>
<h2 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h2><h4 id="主要方法说明："><a href="#主要方法说明：" class="headerlink" title="主要方法说明："></a>主要方法说明：</h4><blockquote>
<p><strong>newFixedThreadPool</strong>（固定大小线程池）：创建一个可重用固定线程集合的线程池，以共享的无界队列方式来运行这些线程（只有要请求的过来，就会在一个队列里等待执行）。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。</p>
<p><strong>newCachedThreadPool</strong>（无界线程池，可以进行自动线程回收）：创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。因此，长时间保持空闲的线程池不会使用任何资源。注意，可以使用 ThreadPoolExecutor 构造方法创建具有类似属性但细节不同（例如超时参数）的线程池。</p>
<p><strong>newSingleThreadExecutor</strong>（单个后台线程）：创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。（注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程，那么如果需要，一个新线程将代替它执行后续的任务）。可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的 newFixedThreadPool(1) 不同，可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。</p>
</blockquote>
<h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><blockquote>
<p>支持两个附加操作的 Queue，这两个操作是：检索元素时等待队列变为非空，以及存储元素时等待空间变得可用。BlockingQueue 不接受 null 元素。试图 add、put 或 offer 一个 null 元素时，某些实现会抛出 NullPointerException。null 被用作指示 poll 操作失败的警戒值。BlockingQueue 可以是限定容量的。它在任意给定时间都可以有一个 remainingCapacity，超出此容量，便无法无阻塞地 put 额外的元素。没有任何内部容量约束的 BlockingQueue 总是报告 Integer.MAX_VALUE 的剩余容量。BlockingQueue 实现主要用于生产者-使用者队列，但它另外还支持 Collection 接口。因此，举例来说，使用 remove(x) 从队列中移除任意一个元素是有可能的。然而，这种操作通常不会有效执行，只能有计划地偶尔使用，比如在取消排队信息时。BlockingQueue 实现是线程安全的。所有排队方法都可以使用内部锁定或其他形式的并发控制来自动达到它们的目的。然而，大量的 Collection 操作（addAll、containsAll、retainAll 和 removeAll）没有必要自动执行，除非在实现中特别说明。因此，举例来说，在只添加了c中的一些元素后，addAll(c) 有可能失败（抛出一个异常）。BlockingQueue 实质上不支持使用任何一种“close”或“shutdown”操作来指示不再添加任何项。这种功能的需求和使用有依赖于实现的倾向。</p>
</blockquote>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><blockquote>
<p>Semaphore是一个计数信号量，它的本质是一个”共享锁”。 信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可 Semaphore 通常用于限制可以访问某些资源（物理或逻辑的）的线程数目。</p>
</blockquote>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><blockquote>
<p>ReentrantLock可以等同于synchronized使用、但是它比synchronized有更强的功能、可以提供更灵活的锁机制、同时减少死锁的发生概率。我们平时用用synchronized也就够了、但是要写好一个复杂的多线程系统、为了提供更灵活的同步机制、就需要用到ReentrantLock了。 ReentrantLock 将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。 此类的构造方法接受一个可选的公平参数。当设置为true时，在多个线程的争用下，这些锁定倾向于将访问权授予等待时间最长的线程。否则此锁定将无法保证任何特定访问顺序。与采用默认设置（使用不公平锁定）相比，使用公平锁定的程序在许多线程访问时表现为很低的总体吞吐量（即速度很慢，常常极其慢），但是在获得锁定和保证锁定分配的均衡性时差异较小。不过要注意的是，公平锁定不能保证线程调度的公平性。因此，使用公平锁定的众多线程中的一员可能获得多倍的成功机会，这种情况发生在其他活动线程没有被处理并且目前并未持有锁定时。还要注意的是，未定时的 tryLock 方法并没有使用公平设置。因为即使其他线程正在等待，只要该锁定是可用的，此方法就可以获得成功。<br><strong>ReentrantLock相比synchronized多了以下一些特性：</strong></p>
<p>synchronized关键字只能支持单条件（condition）、比如10个线程都在等待synchronized块锁定的资源、如果一直锁定、则其他线程都得不到释放从而引起死锁；而同样的情况使用ReentrantLock、则允许其他线程中断放弃尝试。reentrantlock本身支持多wait/notify队列、它可以指定notify某个线程。 ReentrantLock可以成为公平锁、所谓公平锁就是让等待最长的线程最早获得该锁（获得锁的顺序和申请锁的顺序是一致的）；与之对应的synchronized是非公平的、当然ReentrantLock也可以成为非公平锁；只是公平锁的性能相对差一些。 ReentrantLock又叫可重入锁、也就是说一个线程拥有锁了之后可以再次确认是否持有锁而不会出现死锁的问题。 ReentrantLock可以获取有多少线程正在等待该锁。</p>
</blockquote>
<h2 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h2><blockquote>
<p>当向Executor提交批处理任务时，并且希望在它们完成后获得结果，如果用FutureTask，你可以循环获取task，并用future.get()去获取结果，但是如果这个task没有完成，你就得阻塞在这里，这个实效性不高，其实在很多场合，其实你拿第一个任务结果时，此时结果并没有生成并阻塞，其实在阻塞在第一个任务时，第二个task的任务已经早就完成了，显然这种情况用future task不合适的，效率也不高。自己维护list和CompletionService的区别：从list中遍历的每个Future对象并不一定处于完成状态，这时调用get()方法就会被阻塞住，如果系统是设计成每个线程完成后就能根据其结果继续做后面的事，这样对于处于list后面的但是先完成的线程就会增加了额外的等待时间。 CompletionService采取的是BlockingQueue无界队列来管理Future。则有一个线程执行完毕把返回结果放到BlockingQueue里面。就可以通过completionServcie.take().get()取出结果。方法区别：take 方获取并移除表示下一个已完成任务的 Future，如果目前不存在这样的任务，则等待。&lt;如果需要用到返回值建议用take&gt; poll 获取并移除表示下一个已完成任务的 Future，如果不存在这样的任务，则返回null。</p>
</blockquote>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><blockquote>
<p>一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。用给定的计数 初始化 CountDownLatch。由于调用了 countDown() 方法，所以在当前计数到达零之前，await 方法会一直受阻塞。之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次——计数无法被重置。如果需要重置计数，请考虑使用 CyclicBarrier。CountDownLatch 是一个通用同步工具，它有很多用途。将计数 1 初始化的 CountDownLatch 用作一个简单的开/关锁存器，或入口：在通过调用 countDown() 的线程打开入口前，所有调用 await 的线程都一直在入口处等待。用 N 初始化的 CountDownLatch 可以使一个线程在 N 个线程完成某项操作之前一直等待，或者使其在某项操作完成 N 次之前一直等待。CountDownLatch 的一个有用特性是，它不要求调用 countDown 方法的线程等到计数到达零时才继续，而在所有线程都能通过之前，它只是阻止任何线程继续通过一个 await。</p>
</blockquote>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><blockquote>
<p>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。CyclicBarrier 支持一个可选的 Runnable 命令，在一组线程中的最后一个线程到达之后（但在释放所有线程之前），该命令只在每个屏障点运行一次。若在继续所有参与线程之前更新共享状态，此屏障操作 很有用。</p>
</blockquote>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><blockquote>
<p>Future 表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。计算完成后只能使用 get 方法来检索结果，如有必要，计算完成前可以阻塞此方法。取消则由 cancel 方法来执行。还提供了其他方法，以确定任务是正常完成还是被取消了。一旦计算完成，就不能再取消计算。如果为了可取消性而使用 Future但又不提供可用的结果，则可以声明 Future</p>
</blockquote>
<h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><blockquote>
<p>一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令。schedule 方法使用各种延迟创建任务，并返回一个可用于取消或检查执行的任务对象。scheduleAtFixedRate 和 scheduleWithFixedDelay 方法创建并执行某些在取消前一直定期运行的任务。用Executor.execute(java.lang.Runnable) 和 ExecutorService 的 submit 方法所提交的命令，通过所请求的 0 延迟进行安排。schedule 方法中允许出现 0 和负数延迟（但不是周期），并将这些视为一种立即执行的请求。所有的 schedule 方法都接受相对 延迟和周期作为参数，而不是绝对的时间或日期。将以 Date 所表示的绝对时间转换成要求的形式很容易。例如，要安排在某个时刻以后的日期运行，可以使用：schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS)。但是要注意，由于网络时间同步协议、时钟漂移或其他因素的存在，因此相对延迟的期满日期不必与启用任务的当前 Date 相符。Executors 类为此包中所提供的 ScheduledExecutorService 实现提供了便捷的工厂方法。</p>
</blockquote>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><blockquote>
<p>这都是基础的。具体代码在<a href="https://github.com/lvtanxi/ThreadLesson" target="_blank" rel="external">github</a>上。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java-二叉树]]></title>
      <url>/2017/05/09/Java-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>无论是链表，栈还是队列，它们都是线性结构的，每个节点的左边最多一个节点，右边也最多一个节点。对于大量的输入数据，线性表的访问时间太长，效率较低，不宜使用。<br>  因此需要一种非线性的数据结构，树型结构，其大部分操作的运行时间平均为O(logN)。<br>  在计算机科学中，树是非常有用的抽象概念。我们形象的去描述一棵树，一个家族的祖父有两个儿子，这两个儿子一个有一个儿子，一个有三个儿子，像这样发展下去的一个族谱，就是一个树，如图:<br>  <img src="/assets/tree.png" alt=""><br>  就像一棵真正的树一样，我们把祖父称为树根，两个儿子是分叉开的两个树枝，这两棵树枝可以继续向下分成N个树枝，循环下去，一直到长出叶子为止。<br>  我们把祖父或者树根称为根root节点，祖父的儿子称为子节点，每个儿子作为根节点又可以形成一棵树，我们把这样的树称为根节点的子树。</p>
</blockquote>
<h2 id="树的标准定义："><a href="#树的标准定义：" class="headerlink" title="树的标准定义："></a>树的标准定义：</h2><p>树tree是包含n(n&gt;0)个节点的有穷集合，其中：</p>
<ol>
<li>每个元素称为节点(Node)</li>
<li>有一个特定的节点被称为根节点或树根(RootNode)</li>
<li>除根节点之外的其余数据元素被分为m(m&gt;=0)个互不相交的结合T1,T2…Tm-1,其中每个几个T1本身也是一棵树，被称作原树的子树(SubTree)</li>
</ol>
<h2 id="树具有以下特点："><a href="#树具有以下特点：" class="headerlink" title="树具有以下特点："></a>树具有以下特点：</h2><ol>
<li>每个节点有零个或者多个子节点</li>
<li>每个子节点只有一个父节点</li>
<li>没有父节点的节点被称为根节点</li>
</ol>
<h2 id="关于树的一些术语"><a href="#关于树的一些术语" class="headerlink" title="关于树的一些术语"></a>关于树的一些术语</h2><ul>
<li>节点的度：一个节点含有的子树的个数称为该节点的度</li>
<li>叶子节点或终端节点：度为零的节点称为叶节点</li>
<li>非终端节点或者分支节点：度不为零的节点</li>
<li>父节点：如果一个节点含有子节点，则这个节点称为其子节点的父节点</li>
<li>子节点：一个节点含有的子树的根节点被称为该节点的子节点</li>
<li>兄弟节点：具有相同父节点的节点互称为兄弟节点</li>
<li>树的高度：定义一棵树的根节点层次为1，其他节点的层次是其父节点层次+1.一棵树中所有节点的层次的最大值称为这棵树的深度</li>
<li>节点层次：从跟开始定义起，根为第1层，根的子节点为第2层，一次类推</li>
<li>节点的祖先：从根节点到该节点所经分支上的所有节点</li>
<li>子孙：以某节点为根的子树中任一节点都被称为该节点的子孙</li>
</ul>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><blockquote>
<p>二叉树作为树的一种具体的表现形式，也是树的一个重要的类型。许多实际问题抽象出来的数据结构往往是二叉树的形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。<br>    二叉树(BinaryTree)是n(n≥0)个结点的有限集，它或者是空集(n=0)，或者由一个根结点及两棵互不相交的、分别称作这个根的左子树和右子树的二叉树组成。 这个定义是递归的。由于左、右子树也是二叉树， 因此子树也可为空树。<br>    下图中展现了五种不同基本形态的二叉树<br>    <img src="/assets/binary_tree.jpg" alt=""><br>其中</p>
<ul>
<li>(a)为空树</li>
<li>(b)为仅有一个节点的二叉树</li>
<li>(c)为仅有左节点的二叉树</li>
<li>(d)为仅有右节点的二叉树</li>
<li>(e)为左右都有节点的二叉树</li>
</ul>
</blockquote>
<p>需要特别注意的是：<strong>二叉树的左子树和右子树是严格区分并且不能随意颠倒的，而且左子节点的数值要小于父节点，右子节点的数值要大于父节点</strong></p>
<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><blockquote>
<p>对于二叉树来讲最主要、最基本的运算就是遍历。遍历二叉树是指以一定的次序访问二叉树的每一个节点。遍历二叉树的过程实质是把二叉树的节点进行线性排序的工程。</p>
</blockquote>
<h2 id="二叉树的java实现"><a href="#二叉树的java实现" class="headerlink" title="二叉树的java实现"></a>二叉树的java实现</h2><blockquote>
<p>要想遍历，我们则需要创建二叉树首先创建一棵二叉树如下图，然后对这颗二叉树进行遍历操作（遍历操作的实现分为递归实现和非递归实现），同时还提供一些方法如获取双亲结点、获取左孩子、右孩子等。<br><img src="/assets/create_binary_tree.jpg" alt=""></p>
</blockquote>
<h2 id="Java实现代码："><a href="#Java实现代码：" class="headerlink" title="Java实现代码："></a>Java实现代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 二叉树的增，删，改，查</div><div class="line"> * </div><div class="line"> * @author Administrator</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class BinaryTree &#123;</div><div class="line"></div><div class="line">	// 定义一个节点的数据结构()</div><div class="line">	private class Node &#123;</div><div class="line">		Node parent;// 父节点</div><div class="line">		Node left; // 左儿子</div><div class="line">		Node right; // 右儿子</div><div class="line">		Object data; // 任意类型的数据</div><div class="line"></div><div class="line">		public Node(Object data) &#123;</div><div class="line">			this.data = data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Node root;// 定义一个根节点</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * &lt;一&gt;.二叉树的添加功能</div><div class="line">	 * </div><div class="line">	 * @param data</div><div class="line">	 *            data： 为要添加的数据</div><div class="line">	 */</div><div class="line">	public void add(Object data) &#123;</div><div class="line">		// 首先判断是否包含该数据</div><div class="line">		if (contains(data)) &#123;</div><div class="line">			// 如果包含</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		// 1.把要添加的数据放到节点中</div><div class="line">		Node node = new Node(data);</div><div class="line">		node.data=data;</div><div class="line">		// 2.把节点链接到二叉树中</div><div class="line">		// 是否有根节点</div><div class="line">		if (root == null) &#123;</div><div class="line">			root = node;// 把该节点保存到根节点中去</div><div class="line">		&#125; else &#123;</div><div class="line">			// 如果跟节点不为空</div><div class="line">			// 找父节点，比较字节与父节点的值，如果比父节点小放左边，如果比父节点大放右边</div><div class="line">			// 从根节点开始查找</div><div class="line">			Node parent = findParent(data, root);</div><div class="line">			// 设置新增节点的父节点为查找到的节点</div><div class="line">			node.parent = parent;</div><div class="line">			// 把新增加的节点放在找到的父节点的左边还是右边还需要判断与父节点的大小</div><div class="line">			if (compare(data, parent.data)) &#123;</div><div class="line">				// 如果比父节点大，放在父节点的右边</div><div class="line">				parent.right = node;</div><div class="line">			&#125; else &#123;</div><div class="line">				parent.left = node;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * @param data</div><div class="line">	 *            传递的数据</div><div class="line">	 * @param currentNode</div><div class="line">	 *            从哪个节点开始查找 return ：返回的是父节点的值</div><div class="line">	 */</div><div class="line">	private Node findParent(Object data, Node currentNode) &#123;</div><div class="line">		// 从哪个节点开始查找</div><div class="line">		Node temp = currentNode;</div><div class="line">		Node parent = currentNode;</div><div class="line">		while (temp != null) &#123;</div><div class="line">			// 把临时的节点复制给父节点</div><div class="line">			parent = temp;</div><div class="line">			// 比较待添加的数据和父节点的大小</div><div class="line">			if (compare(data, temp.data)) &#123;</div><div class="line">				// 如果待添加的节点大于当前节点的话</div><div class="line">				temp = temp.right;</div><div class="line"></div><div class="line">			&#125; else &#123;</div><div class="line">				// 小于当前的节点</div><div class="line">				temp = temp.left;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		return parent;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * @param o1</div><div class="line">	 *            第一个值</div><div class="line">	 * @param o2</div><div class="line">	 *            第二个值</div><div class="line">	 * @return 如果o1 &gt; o2 返回结果为true，否则返回为false</div><div class="line">	 */</div><div class="line">	public boolean compare(Object o1, Object o2) &#123;</div><div class="line">		boolean res = false;</div><div class="line">		// 判断o1有没有实现比较器</div><div class="line">		if (o1 instanceof Comparable) &#123;</div><div class="line">			Comparable c1 = (Comparable) o1;</div><div class="line">			Comparable c2 = (Comparable) o2;</div><div class="line">			if (c1.compareTo(c2) &gt; 0) &#123;</div><div class="line">				res = true;</div><div class="line">			&#125; else &#123;</div><div class="line">				// 默认值就是true</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; else &#123;</div><div class="line">			// 没有实现比较器</div><div class="line">			res = o1.toString().compareTo(o2.toString()) &gt; 0 ? true : false;</div><div class="line">		&#125;</div><div class="line">		return res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * &lt;二&gt;、二叉树的删除操作</div><div class="line">	 * </div><div class="line">	 * @param data：传入要删除的数据</div><div class="line">	 */</div><div class="line">	public void remove(Object data) &#123;</div><div class="line">		// 1.查找数据是否存在</div><div class="line">		Node temp = find(data);</div><div class="line">		// 2.如果存在：找到数据节点</div><div class="line">		if (temp != null) &#123;</div><div class="line">			// 存在</div><div class="line">			// 3.删除节点（1，待删除的节点为 根节点 和 非根节点）</div><div class="line"></div><div class="line">			// 1.删除的节点是根节点：</div><div class="line">			if (temp == root) &#123;</div><div class="line">				// 11.没有儿子</div><div class="line">				if (temp.left == null &amp;&amp; temp.right == null) &#123;</div><div class="line">					root = null;</div><div class="line">				&#125; else if (temp.right == null) &#123;</div><div class="line">					// 12.只有左儿子</div><div class="line">					root = root.left;</div><div class="line">					root.parent = null;</div><div class="line">				&#125; else if (temp.left == null) &#123;</div><div class="line">					// 13.只有右儿子</div><div class="line">					root = root.right;</div><div class="line">					root.parent = null;</div><div class="line">				&#125; else &#123;</div><div class="line">					// 14.两个儿子都有</div><div class="line">					// 我们这里保留左儿子（也可以保留右儿子）</div><div class="line">					Node left = getLeft(temp);</div><div class="line">					root = left;</div><div class="line">					root.parent = null;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; else &#123;</div><div class="line">				// 2.删除的节点是非根节点</div><div class="line"></div><div class="line">				// 21.没有儿子(叶子节点)</div><div class="line">				if (temp.left == null &amp;&amp; temp.right == null) &#123;</div><div class="line">					if (compare(temp.data, temp.parent.data)) &#123;</div><div class="line">						// 在父节点的右边，右叶子节点</div><div class="line">						temp.parent.right = null;</div><div class="line">					&#125; else &#123;</div><div class="line">						temp.parent.left = null;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125; else if (temp.right == null) &#123;</div><div class="line">					// 22.只有左儿子</div><div class="line">					if (compare(temp.data, temp.parent.data)) &#123;</div><div class="line">						// 删除的节点在父节点的右边</div><div class="line">						temp.parent.right = temp.left;</div><div class="line">						temp.left.parent = temp.parent;</div><div class="line">					&#125; else &#123;</div><div class="line">						// 在父节点左边</div><div class="line">						temp.parent.left = temp.left;</div><div class="line">						temp.left.parent = temp.parent;</div><div class="line">					&#125;</div><div class="line">				&#125; else if (temp.left == null) &#123;</div><div class="line">					// 23 只有右儿子</div><div class="line">					if (compare(temp.data, temp.parent.data)) &#123;</div><div class="line">						// 在父节点右边</div><div class="line">						temp.parent.right = temp.right;</div><div class="line">						temp.right.parent = temp.parent;</div><div class="line">					&#125; else &#123;</div><div class="line">						// 在父节点左边</div><div class="line">						temp.parent.left = temp.right;</div><div class="line">						temp.right.parent = temp.parent;</div><div class="line">					&#125;</div><div class="line">				&#125; else &#123;</div><div class="line">					// 24.两个儿子都有</div><div class="line">					Node left = getLeft(temp);</div><div class="line">					// 上面还有父节点（爷爷节点）</div><div class="line">					if (compare(left.data, temp.parent.data)) &#123;</div><div class="line">						// 比爷爷节点大</div><div class="line">						temp.parent.right = left;</div><div class="line">						left.parent = temp.parent;</div><div class="line"></div><div class="line">					&#125; else &#123;</div><div class="line">						// 比爷爷节点小</div><div class="line">						temp.parent.left = left;</div><div class="line">						left.parent = temp.parent;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * &lt;四&gt; 更新数据</div><div class="line">	 * </div><div class="line">	 * @param oldData</div><div class="line">	 *            老数据</div><div class="line">	 * @param newData</div><div class="line">	 *            新数据</div><div class="line">	 */</div><div class="line">	public void update(Object oldData, Object newData) &#123;</div><div class="line">		remove(oldData);</div><div class="line">		add(newData);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * @param node:</div><div class="line">	 *            要删除的节点</div><div class="line">	 * @return 返回的是左儿子节点</div><div class="line">	 */</div><div class="line">	private Node getLeft(Node node) &#123;</div><div class="line">		// 保留左儿子</div><div class="line">		Node left = node.left;</div><div class="line">		// 处理右节点</div><div class="line">		// 寻找右节点的新的爹(从左节点开始找)</div><div class="line">		Node rightNewParrent = findParent(node.right.data, left);</div><div class="line">		rightNewParrent.right = node.right;</div><div class="line">		node.right.parent = rightNewParrent;</div><div class="line"></div><div class="line">		return left;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * &lt;三&gt;、二叉树的查询 操作</div><div class="line">	 * </div><div class="line">	 * @param data</div><div class="line">	 *            传入的数据</div><div class="line">	 * @return 返回该数据的节点</div><div class="line">	 */</div><div class="line">	private Node find(Object data) &#123;</div><div class="line">		// 从跟节点开始查找</div><div class="line">		Node temp = root;</div><div class="line">		while (temp != null) &#123;</div><div class="line">			// 判断数据</div><div class="line">			if (data.equals(temp.data) &amp;&amp; data.hashCode() == temp.data.hashCode()) &#123;</div><div class="line">				// 找到了数据</div><div class="line">				break;</div><div class="line"></div><div class="line">			&#125; else if (compare(data, temp.data)) &#123;</div><div class="line">				// 如果查找的数据比临时的数据大的话，从右边找</div><div class="line">				temp = temp.right;</div><div class="line"></div><div class="line">			&#125; else &#123;</div><div class="line">				temp = temp.left;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		return temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 判断跟节点是否为空</div><div class="line">	 * </div><div class="line">	 * @return 返回根节点是否为空</div><div class="line">	 */</div><div class="line">	public boolean isEmpty() &#123;</div><div class="line">		return root == null;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 树的高度</div><div class="line">	public int height() &#123;</div><div class="line">		return height(root);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 计算二叉树节点的高度</div><div class="line">	 * </div><div class="line">	 * @param subTree</div><div class="line">	 *            节点</div><div class="line">	 * @return 节点高度</div><div class="line">	 */</div><div class="line">	private int height(Node subTree) &#123;</div><div class="line">		if (subTree == null)</div><div class="line">			return 0;// 递归结束：空树高度为0</div><div class="line">		else &#123;</div><div class="line">			int i = height(subTree.left);</div><div class="line">			int j = height(subTree.right);</div><div class="line">			return (i &lt; j) ? (j + 1) : (i + 1);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 返回双亲结点</div><div class="line">	public Node parent(Node element) &#123;</div><div class="line">		return (root == null || root == element) ? null : parent(root, element);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Node parent(Node subTree, Node element) &#123;</div><div class="line">		if (subTree == null)</div><div class="line">			return null;</div><div class="line">		if (subTree.left == element || subTree.right == element)</div><div class="line">			// 返回父结点地址</div><div class="line">			return subTree;</div><div class="line">		Node p;</div><div class="line">		// 现在左子树中找，如果左子树中没有找到，才到右子树去找</div><div class="line">		if ((p = parent(subTree.left, element)) != null)</div><div class="line">			// 递归在左子树中搜索</div><div class="line">			return p;</div><div class="line">		else</div><div class="line">			// 递归在右子树中搜索</div><div class="line">			return parent(subTree.right, element);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 计算节点大小</div><div class="line">	 * </div><div class="line">	 * @param subTree</div><div class="line">	 *            节点</div><div class="line">	 * @return 节点大小</div><div class="line">	 */</div><div class="line">	private int size(Node subTree) &#123;</div><div class="line">		if (subTree == null) &#123;</div><div class="line">			return 0;</div><div class="line">		&#125; else &#123;</div><div class="line">			return 1 + size(subTree.left) + size(subTree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param data</div><div class="line">	 * @return 是否包含该数据</div><div class="line">	 */</div><div class="line">	public boolean contains(Object data) &#123;</div><div class="line"></div><div class="line">		return null != find(data);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 在释放某个结点时，该结点的左右子树都已经释放，</div><div class="line">	// 所以应该采用后续遍历，当访问某个结点时将该结点的存储空间释放</div><div class="line">	public void destroy(Node subTree) &#123;</div><div class="line">		// 删除根为subTree的子树</div><div class="line">		if (subTree != null) &#123;</div><div class="line">			// 删除左子树</div><div class="line">			destroy(subTree.left);</div><div class="line">			// 删除右子树</div><div class="line">			destroy(subTree.right);</div><div class="line">			// 删除根结点</div><div class="line">			subTree = null;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 递归打印数据</div><div class="line">	 */</div><div class="line">	public void traverse(Node subTree) &#123;</div><div class="line">		visted(subTree);</div><div class="line">		if (subTree != null) &#123;</div><div class="line">			traverse(subTree.left);</div><div class="line">			traverse(subTree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Node getRoot() &#123;</div><div class="line">		return root;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 前序遍历</div><div class="line">	public void preOrder(Node subTree) &#123;</div><div class="line">		if (subTree != null) &#123;</div><div class="line">			visted(subTree);</div><div class="line">			preOrder(subTree.left);</div><div class="line">			preOrder(subTree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 中序遍历</div><div class="line">	public void inOrder(Node subTree) &#123;</div><div class="line">		if (subTree != null) &#123;</div><div class="line">			inOrder(subTree.left);</div><div class="line">			visted(subTree);</div><div class="line">			inOrder(subTree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 后续遍历</div><div class="line">	public void postOrder(Node subTree) &#123;</div><div class="line">		if (subTree != null) &#123;</div><div class="line">			postOrder(subTree.left);</div><div class="line">			postOrder(subTree.right);</div><div class="line">			visted(subTree);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void visted(Node subTree) &#123;</div><div class="line">		if(null!=subTree)</div><div class="line">			System.out.println(&quot;--data:&quot; + subTree.data);;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对二叉树进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TestBinaryTree &#123;</div><div class="line">	/**</div><div class="line">	 * 对二叉树进行测试</div><div class="line">	 * </div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		BinaryTree tree = new BinaryTree();</div><div class="line">		int[] datas = &#123; 55, 33, 44, 88, 66, 99 &#125;;</div><div class="line">		for (int i : datas) &#123;</div><div class="line">			tree.add(i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// 打印二叉树总的数据</div><div class="line">		tree.traverse(tree.getRoot());</div><div class="line">		System.out.println(tree.height());</div><div class="line">		/*// 测试删除</div><div class="line">		tree.remove(33);</div><div class="line">		tree.traverse(tree.getRoot());</div><div class="line"></div><div class="line">		// 测试更新</div><div class="line">		tree.update(44, 77);</div><div class="line">		System.out.println();</div><div class="line">		tree.traverse(tree.getRoot());*/</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><blockquote>
<p>我这里只是讲解了二叉树的一小部分的东西。具体的还可以参考<a href="http://www.jianshu.com/p/0190985635eb" target="_blank" rel="external">《一篇文章搞定面试中的二叉树题目(java实现)》</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[NodeJS与Sequelize操作MySql]]></title>
      <url>/2017/05/08/NodeJS%E4%B8%8ESequelize%E6%93%8D%E4%BD%9CMySql/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在使用NodeJS来关系型操作数据库时，为了方便，通常都会选择一个合适的ORM（Object Relationship Model）框架。毕竟直接操作SQL比较繁琐，通过ORM框架，我们可以使用面向对象的方式来操作表。NodeJS社区有很多的ORM框架，我比较喜欢<a href="http://docs.sequelizejs.com/en/v3/" target="_blank" rel="external">Sequelize</a>，它功能丰富，可以非常方便的进行连表查询。本文就以NodeJs+express+sequelize为例，简单的说说sequelize操作数据库的情况。</p>
</blockquote>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote>
<p>我是用WebStorm开发的项目。我们可以File-&gt;New-&gt;Project&gt;Nodejs express app,然后就会出现这样一个项目，然后为我们的项目安装mysql以及sequelizejs。(npm慢可以换成淘宝镜像)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save sequelize</div><div class="line">npm install --save mysql</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="建立数据库连接"><a href="#建立数据库连接" class="headerlink" title="建立数据库连接"></a>建立数据库连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var sequelize = new Sequelize(</div><div class="line">    &apos;sample&apos;, // 数据库名</div><div class="line">    &apos;root&apos;,   // 用户名</div><div class="line">    &apos;zuki&apos;,   // 用户密码</div><div class="line">    &#123;</div><div class="line">        &apos;dialect&apos;: &apos;mysql&apos;,  // 数据库使用mysql</div><div class="line">        &apos;host&apos;: &apos;localhost&apos;, // 数据库服务器ip</div><div class="line">        &apos;port&apos;: 3306,        // 数据库服务器端口</div><div class="line">        &apos;define&apos;: &#123;</div><div class="line">            &apos;underscored&apos;: true,  // 字段以下划线（_）来分割（默认是驼峰命名风格）</div><div class="line">            &apos;timestamps&apos;: true, //添加创建和修改时间</div><div class="line">            &apos;harset&apos;: &apos;utf8&apos;, //字符编码</div><div class="line">            &apos;collate&apos;: &apos;utf8_general_ci&apos; //数据库排序规则</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="定义单张表"><a href="#定义单张表" class="headerlink" title="定义单张表"></a>定义单张表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var User = sequelize.define(</div><div class="line">    // 默认表名（一般这里写单数），生成时会自动转换成复数形式</div><div class="line">    // 这个值还会作为访问模型相关的模型时的属性名，所以建议用小写形式</div><div class="line">    &apos;user&apos;,</div><div class="line">    // 字段定义（主键、created_at、updated_at默认包含，不用特殊定义）</div><div class="line">    &#123;</div><div class="line">        &apos;emp_id&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10), // 字段类型</div><div class="line">            &apos;allowNull&apos;: false,         // 是否允许为NULL</div><div class="line">            &apos;unique&apos;: true              // 字段是否UNIQUE</div><div class="line">        &#125;,</div><div class="line">        &apos;nick&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;,</div><div class="line">        &apos;department&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.STRING(64),</div><div class="line">            &apos;allowNull&apos;: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>几点说明：</p>
<ol>
<li>建表SQL会自动执行的意思是你主动调用sync的时候。类似这样：User.sync({force: true});（加force:true，会先删掉表后再建表）。我们也可以先定义好表结构，再来定义Sequelize模型，这时可以不用sync。两者在定义阶段没有什么关系，直到我们真正开始操作模型时，才会触及到表的操作，但是我们当然还是要尽量保证模型和表的同步（可以借助一些migration工具）。自动建表功能有风险，使用需谨慎。</li>
<li>所有数据类型，请参考文档<a href="http://sequelize.readthedocs.org/en/latest/api/datatypes/" target="_blank" rel="external">数据类型</a>。</li>
<li>模型还可以定义虚拟属性、类方法、实例方法，请参考文档：<a href="http://sequelize.readthedocs.io/en/latest/docs/models-definition/" target="_blank" rel="external">模型定义</a></li>
<li>其他一些特殊定义如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var User = sequelize.define(</div><div class="line">    &apos;user&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;emp_id&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10), // 字段类型</div><div class="line">            &apos;allowNull&apos;: false,         // 是否允许为NULL</div><div class="line">            &apos;unique&apos;: true              // 字段是否UNIQUE</div><div class="line">        &#125;,</div><div class="line">        &apos;nick&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;,</div><div class="line">        &apos;department&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.STRING(64),</div><div class="line">            &apos;allowNull&apos;: true</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        // 自定义表名</div><div class="line">        &apos;freezeTableName&apos;: true,</div><div class="line">        &apos;tableName&apos;: &apos;xyz_users&apos;,</div><div class="line"></div><div class="line">        // 是否需要增加createdAt、updatedAt、deletedAt字段</div><div class="line">        &apos;timestamps&apos;: true,</div><div class="line"></div><div class="line">        // 不需要createdAt字段</div><div class="line">        &apos;createdAt&apos;: false,</div><div class="line"></div><div class="line">        // 将updatedAt字段改个名</div><div class="line">        &apos;updatedAt&apos;: &apos;utime&apos;</div><div class="line"></div><div class="line">        // 将deletedAt字段改名</div><div class="line">        // 同时需要设置paranoid为true（此种模式下，删除数据时不会进行物理删除，而是设置deletedAt为当前时间</div><div class="line">        &apos;deletedAt&apos;: &apos;dtime&apos;,</div><div class="line">        &apos;paranoid&apos;: true</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="单表增删改查"><a href="#单表增删改查" class="headerlink" title="单表增删改查"></a>单表增删改查</h2><blockquote>
<p>通过Sequelize获取的模型对象都是一个DAO（Data Access Object）对象，这些对象会拥有许多操作数据库表的实例对象方法（比如：save、update、destroy等），需要获取“干净”的JSON对象可以调用get({‘plain’: true})。通过模型的类方法可以获取模型对象（比如：findById、findAll等）。</p>
</blockquote>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//请求的参数就像这样：&#123; &apos;emp_id&apos;: &apos;1&apos;,&apos;nick&apos;: &apos;小红&apos;, &apos;department&apos;: &apos;技术部&apos; &#125;</div><div class="line">// 方法1：build后对象只存在于内存中，调用save后才操作db</div><div class="line">exports.add = function (req, res) &#123;</div><div class="line">    let user =  User.build(req.body);</div><div class="line">    user.save().then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">// 方法2：直接操作db</div><div class="line">exports.add = function (req, res) &#123;</div><div class="line">    User.create(req.body).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//请求的参数就像这样：&#123; &apos;id&apos;: &apos;1&apos;,&apos;nick&apos;: &apos;小红&apos;&#125;</div><div class="line">exports.update = function (req, res) &#123;</div><div class="line">    let obj = req.body;</div><div class="line">    let param=&#123;</div><div class="line">        nick:obj.nick,</div><div class="line">    &#125;;</div><div class="line">    User.update(param,&#123;</div><div class="line">        where:&#123; id: obj.id&#125;</div><div class="line">    &#125;).then(function (result) &#123;</div><div class="line">        new ResultHelp(&#123;&#125;).sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//根据ID单个查询</div><div class="line">exports.find = function (req, res) &#123;</div><div class="line">    User.findById(req.query.id).then(function (result) &#123;</div><div class="line">        new ResultHelp(&#123;data: result&#125;).sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">//分页查询</div><div class="line">exports.findByPage = function (req, res) &#123;</div><div class="line">    let obj = req.body;</div><div class="line">    User.findAll(&#123;</div><div class="line">        offset: (req.query.pageNo-1)*obj.pageSize,</div><div class="line">        limit:  parseInt(req.query.pageSize) //注意要强转一次</div><div class="line">    &#125;).then(function (result) &#123;</div><div class="line">        new ResultHelp(&#123;data: result&#125;).sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports.delete = function (req, res) &#123;</div><div class="line">    User.destroy(&#123;</div><div class="line">        where:&#123;&quot;id&quot;: req.body.id&#125;</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        new ResultHelp(&#123;error: err&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><blockquote>
<p>都说了我们这是关系性数据库。关系一般有三种：一对一、一对多、多对多。Sequelize提供了清晰易用的接口来定义关系、进行表间的操作。当说到关系查询时，一般会需要获取多张表的数据。有建议用连表查询join的，有不建议的。我的看法是，join查询这种黑科技在数据量小的情况下可以使用，基本没有什么影响，数据量大的时候，join的性能可能会是硬伤，应该尽量避免，可以分别根据索引取单表数据然后在应用层对数据进行join、merge。当然，查询时一定要分页，不要findAll。</p>
</blockquote>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><h4 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var User = sequelize.define(&apos;user&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;emp_id&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10),</div><div class="line">            &apos;allowNull&apos;: false,</div><div class="line">            &apos;unique&apos;: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">var Account = sequelize.define(&apos;account&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;email&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(20),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line">/* </div><div class="line"> * User的实例对象将拥有getAccount、setAccount、addAccount方法</div><div class="line"> */</div><div class="line">User.hasOne(Account);</div><div class="line">/*</div><div class="line"> * Account的实例对象将拥有getUser、setUser、addUser方法</div><div class="line"> */</div><div class="line">Account.belongsTo(User);</div></pre></td></tr></table></figure>
<blockquote>
<p>一般情况再定义关系的时候我们都不需要去指定外键什么的，因为Sequelize为帮我们创建的，像上面的案例user_id会自动的加到Account</p>
</blockquote>
<h5 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//参数&#123;&quot;user&quot;:&#123;&apos;emp_id&apos;: &apos;1&apos;&#125;,&quot;account&quot;:&#123;&apos;email&apos;: &apos;a&apos;&#125;&#125;</div><div class="line">exports.add = function (req, res) &#123;</div><div class="line">    let account = Account.build(req.body.account);</div><div class="line">    sequelize.transaction(function (t) &#123;</div><div class="line">        return   User.create(req.body, &#123;transaction: t&#125;)</div><div class="line">        .then(function (user) &#123;</div><div class="line">            return  user.setAccount(account);</div><div class="line">        &#125;);</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports.findUsers = function (req, res) &#123;</div><div class="line">    User.findAll(&#123;</div><div class="line">        include: [Account] //这里是包含意思，这样才能查询出account的相关信息</div><div class="line">    &#125;).then(function (users) &#123;</div><div class="line">        new ResultHelp(&#123;data: users&#125;).sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//参数：&#123;&quot;userid&quot;:1,&quot;accountid&quot;:1&#125;</div><div class="line">exports.update = function (req, res) &#123;</div><div class="line">    sequelize.transaction(function (t) &#123;</div><div class="line">        return Promise.all([</div><div class="line">            User.findById(req.body.userid),</div><div class="line">            Account.findById(req.body.accountid),</div><div class="line">        ]).then(function (result) &#123;</div><div class="line">            return result[0].removeAccount(result[1]) //移除某一个账户</div><div class="line">        &#125;)</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 实际情况中一般都是逻辑是删除，这里就这的真删除</div><div class="line"> */</div><div class="line">exports.delete = function (req, res) &#123;</div><div class="line">    User.destroy(&#123;</div><div class="line">        where: &#123;id: req.body.id&#125;</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="模型定义-1"><a href="#模型定义-1" class="headerlink" title="模型定义"></a>模型定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var User = sequelize.define(&apos;user&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;emp_id&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(10),</div><div class="line">            &apos;allowNull&apos;: false,</div><div class="line">            &apos;unique&apos;: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">var Note = sequelize.define(&apos;note&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;title&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(64),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line">/*</div><div class="line"> * User的实例对象将拥有getNotes、setNotes、addNote、createNote、removeNote、hasNote方法</div><div class="line"> */</div><div class="line">User.hasMany(Note);</div><div class="line">/*</div><div class="line"> * Note的实例对象将拥有getUser、setUser、createUser方法</div><div class="line"> */</div><div class="line">Note.belongsTo(User);</div></pre></td></tr></table></figure>
<h5 id="增-2"><a href="#增-2" class="headerlink" title="增"></a>增</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">exports.addUser = function (req, res) &#123;</div><div class="line">    sequelize.transaction(function (t) &#123;</div><div class="line">        return Promise.all([</div><div class="line">            User.create(req.body, &#123;transaction: t&#125;),</div><div class="line">            /**</div><div class="line">             *  individualHooks: true 很关键，批量插入必须使用这个，不然是不会返回数据的id，</div><div class="line">             *  单个插入可以不需要</div><div class="line">             */</div><div class="line">            UserAddress.bulkCreate(req.body.notes, &#123;transaction: t, individualHooks: true&#125;)</div><div class="line">        ]).then(function (result) &#123;</div><div class="line">            return result[0].setNotes(result[1], &#123;transaction: t&#125;),</div><div class="line">        &#125;);</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        new ResultHelp().sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="查-2"><a href="#查-2" class="headerlink" title="查"></a>查</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports.findUsers = function (req, res) &#123;</div><div class="line">    User.findAll(&#123;</div><div class="line">        include: [&#123; model: Note&#125;]</div><div class="line">    &#125;).then(function (users) &#123;</div><div class="line">        new ResultHelp(&#123;data: users&#125;).sendJson(res)</div><div class="line">    &#125;).catch(function (error) &#123;</div><div class="line">        new ResultHelp(&#123;error: error&#125;).sendJson(res)</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><blockquote>
<p>在多对多关系中，必须要额外一张关系表来将2个表进行关联，这张表可以是单纯的一个关系表，也可以是一个实际的模型（含有自己的额外属性来描述关系）。我比较喜欢用一个模型的方式，这样方便以后做扩展。</p>
<h4 id="模型定义-2"><a href="#模型定义-2" class="headerlink" title="模型定义"></a>模型定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var Note = sequelize.define(&apos;note&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;title&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(64),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">var Tag = sequelize.define(&apos;tag&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;name&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.CHAR(64),</div><div class="line">            &apos;allowNull&apos;: false,</div><div class="line">            &apos;unique&apos;: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">var Tagging = sequelize.define(&apos;tagging&apos;,</div><div class="line">    &#123;</div><div class="line">        &apos;type&apos;: &#123;</div><div class="line">            &apos;type&apos;: Sequelize.INTEGER(),</div><div class="line">            &apos;allowNull&apos;: false</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line">// Note的实例拥有getTags、setTags、addTag、addTags、createTag、removeTag、hasTag方法</div><div class="line">Note.belongsToMany(Tag, &#123;&apos;through&apos;: Tagging&#125;);</div><div class="line">// Tag的实例拥有getNotes、setNotes、addNote、addNotes、createNote、removeNote、hasNote方法</div><div class="line">Tag.belongsToMany(Note, &#123;&apos;through&apos;: Tagging&#125;);</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
      
        <categories>
            
            <category> NodeJs </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java-数据结构与算法基础]]></title>
      <url>/2017/05/03/Java-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>数据结构：对计算机内存中的数据的一种安排（集合、数组）<br>算法：对结构中的数据进行各种处理（排序）</p>
</blockquote>
<h2 id="应用方面"><a href="#应用方面" class="headerlink" title="应用方面"></a>应用方面</h2><ol>
<li>现实世界的数据存储</li>
<li>程序员的工具</li>
<li>现实世界的建模</li>
</ol>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td>插入快</td>
<td>查找慢、删除慢、大小固定</td>
</tr>
<tr>
<td>有序数组</td>
<td>比无序数组查找快</td>
<td>删除慢、插入慢、大小固定</td>
</tr>
<tr>
<td>栈</td>
<td>提供后进先出的存取方式</td>
<td>存取其他项慢</td>
</tr>
<tr>
<td>队列</td>
<td>提供先进先出的存取方式</td>
<td>存取其他项慢</td>
</tr>
<tr>
<td>链表</td>
<td>插入、删除快</td>
<td>查找慢</td>
</tr>
<tr>
<td>二叉树</td>
<td>插入、查找、删除都快(树平衡的情况下)</td>
<td>删除算法复杂</td>
</tr>
<tr>
<td>红黑树</td>
<td>插入、查找、删除都快</td>
<td>算法复杂</td>
</tr>
<tr>
<td>2-3-4树</td>
<td>插入、查找、删除都快</td>
<td>算法复杂</td>
</tr>
<tr>
<td>Hash表</td>
<td>插入快、通过关键字存取快</td>
<td>删除慢</td>
</tr>
<tr>
<td>堆</td>
<td>插入、删除、对最大数据项存取快</td>
<td>对其他数据项存取慢</td>
</tr>
<tr>
<td>图</td>
<td>对现实世界建模</td>
<td>算法复杂</td>
</tr>
</tbody>
</table>
<h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><blockquote>
<p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。</p>
</blockquote>
<h3 id="有序数组的二分查找"><a href="#有序数组的二分查找" class="headerlink" title="有序数组的二分查找"></a>有序数组的二分查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Date: 2017-04-24</div><div class="line"> * Time: 10:32</div><div class="line"> * Description: 二分查找</div><div class="line"> */</div><div class="line">object OrderArrayTest &#123;</div><div class="line">    @JvmStatic</div><div class="line">    fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">        //初始化数组</div><div class="line">        val orderArray = IntArray(20)</div><div class="line">        for (item in 0..19) &#123;</div><div class="line">            orderArray[item] = item</div><div class="line">        &#125;</div><div class="line">        val binarySearch = binarySearch(orderArray, 1)</div><div class="line">        println(binarySearch)</div><div class="line">        println(binarySearchDef(orderArray,13))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 不带递归的查找方式</div><div class="line">     */</div><div class="line">    fun binarySearch(array: IntArray, vaule: Int): Int &#123;</div><div class="line">        var low = 0</div><div class="line">        var high = array.size - 1</div><div class="line">        var middle: Int</div><div class="line">        while (low &lt;= high) &#123;</div><div class="line">            middle = (low.plus(high)).div(2)</div><div class="line">            if (vaule == array[middle])</div><div class="line">                return middle</div><div class="line">            else if (vaule &lt; array[middle])</div><div class="line">                high = middle - 1</div><div class="line">            else</div><div class="line">                low = middle + 1</div><div class="line">        &#125;</div><div class="line">        return -1</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 递归的查找方式</div><div class="line">     */</div><div class="line">    fun binarySearch(array: IntArray, vaule: Int, beginIndex: Int, endIndex: Int): Int &#123;</div><div class="line">        val midIndex = (beginIndex.plus(endIndex)).div(2)</div><div class="line">        if (vaule &lt; array[beginIndex] || vaule &gt; array[endIndex] || beginIndex &gt; endIndex)</div><div class="line">            return -1</div><div class="line">        if (vaule &lt; array[midIndex])</div><div class="line">            return binarySearch(array, vaule, beginIndex, midIndex - 1)</div><div class="line">        else if (vaule &gt; array[midIndex])</div><div class="line">            return binarySearch(array, vaule, midIndex + 1, endIndex)</div><div class="line">        else</div><div class="line">            return midIndex</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 默认递归的查找方式</div><div class="line">     */</div><div class="line">    fun binarySearchDef(array: IntArray, vaule: Int): Int &#123;</div><div class="line">        return binarySearch(array, vaule, 0, array.size-1)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单排序-冒泡排序BubbleSort"><a href="#简单排序-冒泡排序BubbleSort" class="headerlink" title="简单排序_冒泡排序BubbleSort"></a>简单排序_冒泡排序<a href="http://blog.csdn.net/kimylrong/article/details/17122671" target="_blank" rel="external">BubbleSort</a></h3><ol>
<li>比较两个对象</li>
<li>如果左边大于右边，则调换位置</li>
<li>向右移动一个位置，比较接下来的的两个对象</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">object BubbleSortTest &#123;</div><div class="line">    @JvmStatic</div><div class="line">    fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">        val arrayOf = intArrayOf(49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35, 25, 53, 51)</div><div class="line">        bubbleSort(arrayOf)</div><div class="line">        arrayOf.forEach(::println)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun bubbleSort(array: IntArray) &#123;</div><div class="line">        var temp:Int</div><div class="line">        for (i in 0..array.lastIndex) &#123;</div><div class="line">            for (j in 0..array.lastIndex - i-1) &#123;</div><div class="line">                if (array[j] &gt; array[j + 1]) &#123;</div><div class="line">                    temp = array[j]</div><div class="line">                    array[j] = array[j + 1]</div><div class="line">                    array[j + 1] = temp</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单排序-选择排序SelectionSort"><a href="#简单排序-选择排序SelectionSort" class="headerlink" title="简单排序_选择排序SelectionSort"></a>简单排序_选择排序<a href="http://www.cnblogs.com/shen-hua/p/5424059.html" target="_blank" rel="external">SelectionSort</a></h3><blockquote>
<p>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。也就是：每一趟在n-i+1(i=1，2，…n-1)个记录中选取关键字最小的记录作为有序序列中第i个记录。基于此思想的算法主要有简单选择排序、树型选择排序和堆排序。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">object SelectSortTest &#123;</div><div class="line">    @JvmStatic</div><div class="line">    fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">        val arrayOf = intArrayOf(1, 3, 2, 45, 65, 33, 12)</div><div class="line">        outPut(arrayOf)</div><div class="line">        selectSort(arrayOf)</div><div class="line">        outPut(arrayOf)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun selectSort(array: IntArray) &#123;</div><div class="line">        var min: Int</div><div class="line">        var temp: Int</div><div class="line">        for (out in 0..array.lastIndex) &#123;</div><div class="line">            min = out</div><div class="line">            //找出第out+1位到最后的最小值</div><div class="line">            (min.plus(1)..array.lastIndex)</div><div class="line">                    .asSequence()</div><div class="line">                    .filter &#123; array[it] &lt; array[min] &#125;</div><div class="line">                    .forEach &#123; min = it &#125;</div><div class="line">            //看看是不是最小的，如果是最小的就交换位置</div><div class="line">            if (out != min) &#123;</div><div class="line">                temp = array[out]</div><div class="line">                array[out] = array[min]</div><div class="line">                array[min] = temp</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fun outPut(array: IntArray)&#123;</div><div class="line">        array.forEach&#123;</div><div class="line">            print(it)</div><div class="line">            print(&quot;,&quot;)</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单排序-插入排序InsertSort"><a href="#简单排序-插入排序InsertSort" class="headerlink" title="简单排序_插入排序InsertSort"></a>简单排序_插入排序<a href="http://blog.csdn.net/lg1259156776/article/details/48689323" target="_blank" rel="external">InsertSort</a></h3><blockquote>
<p>每步将一个待排序的对象,按其排序码大小,插入到前面已经排好序的一组对象的适当位置上,直到对象全部插入为止。不过逆序的时候没有选择或者冒泡排序快</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">object InsertSort &#123;</div><div class="line">    @JvmStatic</div><div class="line">    fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">        val arrayOf = intArrayOf(1, 3, 2, 45, 65, 33, 12)</div><div class="line">        arrayOf.outPut()</div><div class="line">        insertSort(arrayOf)</div><div class="line">        arrayOf.outPut()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun insertSort(array: IntArray) &#123;</div><div class="line">        var temp: Int</div><div class="line">        var tagIndex: Int</div><div class="line">        //这里的下标从1开始，因为默认取出一个</div><div class="line">        for (i in 1..array.lastIndex) &#123;</div><div class="line">            temp = array[i]</div><div class="line">            tagIndex = i</div><div class="line">            //这里是从向前取数，有点倒叙的意思</div><div class="line">            while (tagIndex &gt; 0 &amp;&amp; array[tagIndex - 1] &gt;= temp) &#123;</div><div class="line">                array[tagIndex] = array[tagIndex - 1]</div><div class="line">                tagIndex--</div><div class="line">            &#125;</div><div class="line">            array[tagIndex] = temp</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栈和队列-栈"><a href="#栈和队列-栈" class="headerlink" title="栈和队列_栈"></a>栈和队列_栈</h3><blockquote>
<p>栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行，其表现形式是后进先出(像木桶装东西)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">class StackX &#123;</div><div class="line">    //模拟木桶</div><div class="line">    private val stackArray: ArrayList&lt;Int&gt; = ArrayList()</div><div class="line">    //添加元素</div><div class="line">    fun push(value: Int) &#123;</div><div class="line">        if (!isFull())//如果满了就不添加了</div><div class="line">            stackArray.add(value)</div><div class="line">    &#125;</div><div class="line">    //弹出最后一个</div><div class="line">    fun pop(): Int &#123;</div><div class="line">        return stackArray.removeAt(stackArray.lastIndex)</div><div class="line">    &#125;</div><div class="line">    //查看最后一个</div><div class="line">    fun peek(): Int &#123;</div><div class="line">        return stackArray[stackArray.lastIndex]</div><div class="line">    &#125;</div><div class="line">    //是否为空</div><div class="line">    fun isEmpty(): Boolean &#123;</div><div class="line">        return stackArray.isEmpty()</div><div class="line">    &#125;</div><div class="line">    //是否满了</div><div class="line">    fun isFull(): Boolean &#123;</div><div class="line">        return stackArray.size &gt; 30</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val stackX = StackX()</div><div class="line">            stackX.push(20)</div><div class="line">            stackX.push(40)</div><div class="line">            stackX.push(60)</div><div class="line">            stackX.push(80)</div><div class="line">            while (!stackX.isEmpty()) &#123;</div><div class="line">                val pop = stackX.pop()</div><div class="line">                println(pop)</div><div class="line">            &#125;</div><div class="line">            println(&quot;是否空了$&#123;stackX.isEmpty()&#125;&quot;)</div><div class="line">            println(&quot;是否满了$&#123;stackX.isFull()&#125;&quot;)</div><div class="line">            stackX.push(10)</div><div class="line">            stackX.push(30)</div><div class="line">            println(&quot;查看$&#123;stackX.peek()&#125;&quot;)</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栈和队列-队列"><a href="#栈和队列-队列" class="headerlink" title="栈和队列_队列"></a>栈和队列_队列</h3><blockquote>
<p>队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作。变现为先进先出（像排队打饭）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Queue &#123;</div><div class="line">    //队列缓存区</div><div class="line">    private val queArray: ArrayList&lt;Int&gt; = ArrayList()</div><div class="line">    //添加</div><div class="line">    fun push(value: Int) = queArray.add(value)</div><div class="line">    //删除</div><div class="line">    fun pop() = queArray.removeAt(0)</div><div class="line">    //查看</div><div class="line">    fun outPut()=queArray.outPut()</div><div class="line"></div><div class="line">    companion object&#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val queue = Queue()</div><div class="line">            queue.push(10)</div><div class="line">            queue.push(20)</div><div class="line">            queue.push(30)</div><div class="line">            queue.push(40)</div><div class="line">            println(&quot;删除了$&#123;queue.pop()&#125;&quot;)</div><div class="line">            println(&quot;删除了$&#123;queue.pop()&#125;&quot;)</div><div class="line">            println(&quot;删除了$&#123;queue.pop()&#125;&quot;)</div><div class="line">            queue.push(50)</div><div class="line">            queue.push(60)</div><div class="line">            queue.push(70)</div><div class="line">            queue.push(80)</div><div class="line">            queue.push(90)</div><div class="line">           queue.outPut()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栈和队列-优先级队列PriorityQueue"><a href="#栈和队列-优先级队列PriorityQueue" class="headerlink" title="栈和队列_优先级队列PriorityQueue"></a>栈和队列_优先级队列<a href="http://blog.csdn.net/hiphopmattshi/article/details/7334487" target="_blank" rel="external">PriorityQueue</a></h3><blockquote>
<p>优先级队列是不同于先进先出队列的另一种队列。每次从队列中取出的是具有最高优先权的元素。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class PriorityQueue &#123;</div><div class="line">    private val queArray: ArrayList&lt;Int&gt; = ArrayList()</div><div class="line"></div><div class="line">    fun insert(item: Int) &#123;</div><div class="line">        val index = findIndex(item)</div><div class="line">        queArray.add(index, item)</div><div class="line">        queArray.outPut()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun pop() = queArray.removeAt(queArray.lastIndex)</div><div class="line"></div><div class="line">    fun outPut()=queArray.outPut()</div><div class="line"></div><div class="line">    //需找插入的位置</div><div class="line">    private fun findIndex(item: Int): Int &#123;</div><div class="line">        queArray.withIndex().forEach &#123;</div><div class="line">            if (it.value &lt; item)</div><div class="line">                return it.index</div><div class="line">        &#125;</div><div class="line">        return queArray.lastIndex + 1</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val priorityQueue = PriorityQueue()</div><div class="line">            priorityQueue.insert(9)</div><div class="line">            priorityQueue.insert(8)</div><div class="line">            priorityQueue.insert(5)</div><div class="line">            priorityQueue.insert(6)</div><div class="line">            priorityQueue.insert(7)</div><div class="line">            priorityQueue.pop()</div><div class="line">            priorityQueue.outPut()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栈和队列-算数表达式ArithmeticExpressions"><a href="#栈和队列-算数表达式ArithmeticExpressions" class="headerlink" title="栈和队列_算数表达式ArithmeticExpressions"></a>栈和队列_算数表达式<a href="http://blog.csdn.net/jane_no1/article/details/53504013" target="_blank" rel="external">ArithmeticExpressions</a></h3><blockquote>
<p>在计算机中会采用的是后缀表达式(ABC<em>+)来完成我们日常生活中的中缀表达式(A+B</em>C)。本节重点是将中缀表达式转化成后缀表达式，以A+B*(C-D)为例</p>
</blockquote>
<table>
<thead>
<tr>
<th>读取元素</th>
<th>输出字符串</th>
<th>栈</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>A</td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>A</td>
<td>+</td>
</tr>
<tr>
<td>B</td>
<td>AB</td>
<td>+</td>
</tr>
<tr>
<td>*</td>
<td>AB</td>
<td>+*</td>
</tr>
<tr>
<td>(</td>
<td>AB</td>
<td>+*(</td>
</tr>
<tr>
<td>C</td>
<td>ABC</td>
<td>+*(</td>
</tr>
<tr>
<td>-</td>
<td>ABC</td>
<td>+*(-</td>
</tr>
<tr>
<td>D</td>
<td>ABCD</td>
<td>+*(-</td>
</tr>
<tr>
<td>)</td>
<td>ABCD-</td>
<td>+*(</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>ABCD-</td>
<td>+*</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>ABCD-*</td>
<td>+</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>ABCD-*+</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">class ArithmeticStackX &#123;</div><div class="line">    //模拟木桶</div><div class="line">    private val stackArray: ArrayList&lt;Int&gt; = ArrayList()</div><div class="line"></div><div class="line">    //添加元素</div><div class="line">    fun push(value: Int) &#123;</div><div class="line">        if (!isFull())//如果满了就不添加了</div><div class="line">            stackArray.add(value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //弹出最后一个</div><div class="line">    fun pop() = stackArray.removeAt(stackArray.lastIndex)</div><div class="line"></div><div class="line">    //查看最后一个</div><div class="line">    fun peek() = stackArray[stackArray.lastIndex]</div><div class="line"></div><div class="line">    //是否为空</div><div class="line">    fun isEmpty() = stackArray.isEmpty()</div><div class="line"></div><div class="line">    //是否满了</div><div class="line">    fun isFull() = stackArray.size &gt; 100</div><div class="line"></div><div class="line">    //计算结果</div><div class="line">    fun doPasrse(string: String): Int &#123;</div><div class="line">        //零时缓存连续弹出的两个数字以及计算结果</div><div class="line">        var num1: Int</div><div class="line">        var num2: Int</div><div class="line">        var interAns: Int</div><div class="line">        //对传进来的后缀字符串进行遍历</div><div class="line">        for (ch in string.toCharArray()) &#123;</div><div class="line">            //判断是否是数字</div><div class="line">            if (ch in &apos;0&apos;..&apos;9&apos;) &#123;</div><div class="line">                push(ch.toInt().minus(&apos;0&apos;.toInt())) //这一步很关键，默认的Char 转Int会变成hashcode对应的值，所以要减去0的hashcode值</div><div class="line">            &#125; else &#123;</div><div class="line">                num1 = pop()</div><div class="line">                num2 = pop()</div><div class="line">                //根据运算符号进行计算</div><div class="line">                when (ch) &#123;</div><div class="line">                    &apos;+&apos; -&gt; interAns = num2.plus(num1)</div><div class="line">                    &apos;-&apos; -&gt; interAns = num2.minus(num1)</div><div class="line">                    &apos;*&apos; -&gt; interAns = num2.times(num1)</div><div class="line">                    &apos;/&apos; -&gt; interAns = num2.div(num1)</div><div class="line">                    else -&gt; interAns = 0</div><div class="line">                &#125;</div><div class="line">                //每次结果要放回去，以便后面再计算</div><div class="line">                push(interAns)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //获取最后计算结果</div><div class="line">        return pop()</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    fun dispalyStatck(string: String) &#123;</div><div class="line">        print(&quot;$string：&quot;)</div><div class="line">        stackArray.outPut()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">class ArithmeticExpressions &#123;</div><div class="line">    //模拟存放字运算符的栈</div><div class="line">    private val statckArray: ArrayList&lt;Char&gt; = ArrayList()</div><div class="line">    //最后返回的字符串</div><div class="line">    private val sb = StringBuilder()</div><div class="line">    //添加元素</div><div class="line">    fun push(char: Char) = statckArray.add(char)</div><div class="line">    //弹出最后一个元素</div><div class="line">    fun pop() = statckArray.removeAt(statckArray.lastIndex)</div><div class="line">    //是否为空</div><div class="line">    fun isEmpty() = statckArray.isEmpty()</div><div class="line">    //打印栈</div><div class="line">    fun dispalyStatck(string: String) &#123;</div><div class="line">        print(string)</div><div class="line">        statckArray.outPut()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 中缀表达式转换成后缀表达式</div><div class="line">     * @param input 中缀表达式</div><div class="line">     */</div><div class="line">    fun doTrans(input: String): String &#123;</div><div class="line">        //清空StringBuffer中的</div><div class="line">        sb.setLength(0)</div><div class="line">        //遍历字符串</div><div class="line">        for (ch in input.toCharArray()) &#123;</div><div class="line">            //判断字符的类型</div><div class="line">            when (ch) &#123;</div><div class="line">                // + - 默认为一级运算符号</div><div class="line">                &apos;+&apos;, &apos;-&apos; -&gt; gotOper(ch, 1)</div><div class="line">                // * / 默认为二级运算符号</div><div class="line">                &apos;*&apos;, &apos;/&apos; -&gt; gotOper(ch, 2)</div><div class="line">                // (的时候直接添加进去</div><div class="line">                &apos;(&apos; -&gt; push(ch)</div><div class="line">                // )的时候弹出元素</div><div class="line">                &apos;)&apos; -&gt; gotParen()</div><div class="line">                //普通元素直接拼接</div><div class="line">                else -&gt; sb.append(ch)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //把栈中的元素通过后进先出的原则进行拼接</div><div class="line">        while (!isEmpty()) &#123;</div><div class="line">            sb.append(pop())</div><div class="line">        &#125;</div><div class="line">        return sb.toString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //把栈中的元素通过后进先出的原则进行拼接</div><div class="line">    private fun gotParen() &#123;</div><div class="line">        while (!isEmpty()) &#123;</div><div class="line">            val pop = pop()</div><div class="line">            if (pop == &apos;(&apos;)</div><div class="line">                break</div><div class="line">            sb.append(pop)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //根据字符和运算等级来拼接字符</div><div class="line">    private fun gotOper(opThis: Char, prec1: Int) &#123;</div><div class="line">        while (!isEmpty()) &#123;</div><div class="line">            // 弹出最后一个运算符</div><div class="line">            val pop = pop()</div><div class="line">            //判断是(括号,因为优先级最高,所以添加弹出的元素，然后跳出循环了</div><div class="line">            if (pop == &apos;(&apos;) &#123;</div><div class="line">                push(pop)</div><div class="line">                break</div><div class="line">            &#125;</div><div class="line">            //确定最后一个运算符的运算等级</div><div class="line">            val prec2 = if (pop == &apos;+&apos; || pop == &apos;-&apos;) 1 else 2</div><div class="line">            //获取最后一个运算符的等级小于传进来的等级，则添加运算符，跳出循环，否则就把最后一个元素的值拼接到目标字符串上</div><div class="line">            if (prec2 &lt; prec1) &#123;</div><div class="line">                push(pop)</div><div class="line">                break</div><div class="line">            &#125;</div><div class="line">            //拼接运算符号</div><div class="line">            sb.append(pop)</div><div class="line">        &#125;</div><div class="line">        //最后把传进来的字符串放进栈中</div><div class="line">        push(opThis)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                println(&quot;亲，请输入中缀字符串：&quot;)</div><div class="line">                val bufferedReader = BufferedReader(InputStreamReader(System.`in`))</div><div class="line">                val input = bufferedReader.readLine()</div><div class="line">                if (input.isEmpty())</div><div class="line">                    return</div><div class="line">                val expressions = ArithmeticExpressions()</div><div class="line">                val doTrans = expressions.doTrans(input)</div><div class="line">                println(&quot;转化结果：$doTrans&quot;)</div><div class="line">                val arithmeticStackX = ArithmeticStackX()</div><div class="line">                val doPasrse = arithmeticStackX.doPasrse(doTrans)</div><div class="line">                println(&quot;最后结果了：$doPasrse&quot;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表-单链表SingLink"><a href="#链表-单链表SingLink" class="headerlink" title="链表_单链表SingLink"></a>链表_单链表<a href="http://blog.csdn.net/jane_no1/article/details/53516994" target="_blank" rel="external">SingLink</a></h3><blockquote>
<p>链表，它也是一种数据存储结构，在大多数情况下我们可以通过链表来代替数组的操作，比如说栈和队列的实现，除非需要频繁的通过下标随机访问数据。当链表只能在链表头进行数据的插入和删除以及通过遍历来显示某个数据项的内容时，这个链表就被称为单链表。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//链表节点</div><div class="line">data class SingLink(var iData: Int, var dData: Double, var next: SingLink?=null)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">data class SingLinkList(var first: SingLink? = null) &#123;</div><div class="line">    //插入数据</div><div class="line">    fun insertFirst(id: Int, dd: Double) &#123;</div><div class="line">        first = SingLink(id, dd, first)</div><div class="line">    &#125;</div><div class="line">    //删除第一个数据</div><div class="line">    fun deteleFirst(): SingLink? &#123;</div><div class="line">        val temp = first</div><div class="line">        first = first?.next</div><div class="line">        return temp</div><div class="line">    &#125;</div><div class="line">    //根据key查找数据</div><div class="line">    fun find(key: Int): SingLink? &#123;</div><div class="line">        var current = first</div><div class="line">        if (current != null) &#123;</div><div class="line">            while (current!!.iData != key) &#123;</div><div class="line">                if (current.next != null)</div><div class="line">                    current = current.next</div><div class="line">                else</div><div class="line">                    return null</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return current</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fun delete(key: Int): SingLink? &#123;</div><div class="line">        var current = first</div><div class="line">        var previous = first</div><div class="line">        while (current != null) &#123;</div><div class="line">            if (current.iData == key)</div><div class="line">                break</div><div class="line">            previous = current</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        previous?.next = current?.next</div><div class="line">        return current</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    fun dispalyList() &#123;</div><div class="line">        var current = first</div><div class="line">        if (current != null) &#123;</div><div class="line">            while (current!!.next != null) &#123;</div><div class="line">                println(current.toString())</div><div class="line">                current = current.next</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val linkList = SingLinkList()</div><div class="line">            linkList.insertFirst(1, 2.2)</div><div class="line">            linkList.insertFirst(2, 4.4)</div><div class="line">            linkList.insertFirst(3, 6.6)</div><div class="line">            linkList.insertFirst(4, 8.8)</div><div class="line">            linkList.dispalyList()</div><div class="line">            val link = linkList.delete(3)</div><div class="line">            println(link?.toString())</div><div class="line">            linkList.dispalyList()</div><div class="line">            val link2 = linkList.deteleFirst()</div><div class="line">            println(link2?.toString())</div><div class="line">            linkList.dispalyList()</div><div class="line">            val find = linkList.find(2)</div><div class="line">            println(find?.toString())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表-双端链表DoubleLink"><a href="#链表-双端链表DoubleLink" class="headerlink" title="链表_双端链表DoubleLink"></a>链表_双端链表<a href="http://blog.csdn.net/jane_no1/article/details/53519348" target="_blank" rel="external">DoubleLink</a></h3><blockquote>
<p>双端链表和传统的链表非常相似，唯一的不同点在于，双端链表的表头除了有一个指向第一个链接点的Link对象first外，还有一个指向链表最后一个链接点的Link对象last,双端链表可以很快的像普通链表一样在表头位置插入新节点，同时也可以在表尾直接插入新节点。虽然普通链表也可以做到在表尾插入新链接点，但是需要通过遍历链表直到表尾，这显然效率是很低的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 双端链表节点</div><div class="line">data class DLink(var dData: Int, var next: DLink? = null) &#123;</div><div class="line">    fun dispalyLink()&#123;</div><div class="line">        print(&quot;$dData  &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">//申明两个链节点来存储第一个和最后一个连接点</div><div class="line">data class FirstLastLink(var first: DLink? = null, var last: DLink? = null) &#123;</div><div class="line">    //判断链表是否为空</div><div class="line">    fun isEmpty() = first == null</div><div class="line">    //在依次插入新数据</div><div class="line">    fun insertFirst(dd: Int) &#123;</div><div class="line">        val dLink = DLink(dd)</div><div class="line">        //如果为空的话，这说明第一个链节点也是最后一个链节点</div><div class="line">        if (isEmpty())</div><div class="line">            last = dLink</div><div class="line">        //这是新的第一个节点</div><div class="line">        dLink.next = first</div><div class="line">        first = dLink</div><div class="line">    &#125;</div><div class="line">    //在末尾插入数据</div><div class="line">    fun insertLast(dd: Int) &#123;</div><div class="line">        val dLink = DLink(dd)</div><div class="line">        //如果为空的话，这说明最后一个链节点也是第一个链节点</div><div class="line">        if (isEmpty())</div><div class="line">            first = dLink</div><div class="line">        else</div><div class="line">            last?.next = dLink</div><div class="line">            //这是新的最后一个节点</div><div class="line">        last = dLink</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun deleteFirst(): Int? &#123;</div><div class="line">        val temp = first?.dData</div><div class="line">        if (first?.next == null)</div><div class="line">            last = null</div><div class="line">        first = first?.next</div><div class="line">        return temp</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun dispalyList() &#123;</div><div class="line">        var current = first</div><div class="line">        while (current != null) &#123;</div><div class="line">            current.dispalyLink()</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line">    companion object&#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val firstLastLink = FirstLastLink()</div><div class="line">            firstLastLink.insertFirst(12)</div><div class="line">            firstLastLink.insertFirst(13)</div><div class="line">            firstLastLink.insertFirst(14)</div><div class="line">            firstLastLink.insertLast(15)</div><div class="line">            firstLastLink.last?.dispalyLink()</div><div class="line">            println()</div><div class="line">            firstLastLink.dispalyList()</div><div class="line">            val deleteFirst = firstLastLink.deleteFirst()</div><div class="line">            println(deleteFirst)</div><div class="line">            firstLastLink.dispalyList()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表-有序链表OrderLink"><a href="#链表-有序链表OrderLink" class="headerlink" title="链表_有序链表OrderLink"></a>链表_有序链表<a href="http://blog.csdn.net/jane_no1/article/details/53582539" target="_blank" rel="external">OrderLink</a></h3><blockquote>
<p>在链表中，当数据是按顺序排列时，链表被称为有序链表。一般来说有序链表的删除只在表头进行删除最大或最小值，有时会在链表中删除特定的值。<br>在用到有序数组的地方都可以用有序链表代替，有序链表由于有序数组的地方是它的插入速度（不需要移动和复制）以及数组的大小是固定的，而链表的大小不受限制。不过，有序链表的实现会比有序数组的实现困难一些。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data class OrderLink(var dData: Int, var next: OrderLink? = null) &#123;</div><div class="line">    fun display()&#123;</div><div class="line">        print(&quot;$dData &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">data class OrderLinkList(var first: OrderLink? = null) &#123;</div><div class="line"></div><div class="line">    fun push(orderLink: OrderLink) &#123;</div><div class="line">        var previous: OrderLink? = null</div><div class="line">        var current = first</div><div class="line">        while (current != null &amp;&amp; current.dData &lt; orderLink.dData) &#123;</div><div class="line">            previous = current</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        if (previous == null) &#123;</div><div class="line">            first = orderLink</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">        previous.next = orderLink</div><div class="line">        orderLink.next = current</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun push(key: Int) &#123;</div><div class="line">        push(OrderLink(key))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun bindData(array: ArrayList&lt;OrderLink&gt;) &#123;</div><div class="line">        first = null</div><div class="line">        for (item in array) &#123;</div><div class="line">            push(item)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    fun pop(): OrderLink? &#123;</div><div class="line">        val temp = first</div><div class="line">        first = first?.next</div><div class="line">        return temp</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun display() &#123;</div><div class="line">        var current = first</div><div class="line">        while (current != null) &#123;</div><div class="line">            current.display()</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val orderLinkList = OrderLinkList()</div><div class="line">         /*   orderLinkList.push(1)</div><div class="line">            orderLinkList.push(5)</div><div class="line">            orderLinkList.push(3)</div><div class="line">            orderLinkList.push(2)</div><div class="line">            orderLinkList.push(28)</div><div class="line">            orderLinkList.display()</div><div class="line">            orderLinkList.pop()</div><div class="line">            orderLinkList.display()*/</div><div class="line">            val random = Random()</div><div class="line">            val array = ArrayList&lt;OrderLink&gt;()</div><div class="line">            var link:OrderLink</div><div class="line">            (0..100).forEach&#123;</div><div class="line">                link= OrderLink(random.nextInt(100))</div><div class="line">                array.add(link)</div><div class="line">            &#125;</div><div class="line">            orderLinkList.bindData(array)</div><div class="line">            orderLinkList.display()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表-双向链表TwoWayLink"><a href="#链表-双向链表TwoWayLink" class="headerlink" title="链表_双向链表TwoWayLink"></a>链表_双向链表<a href="http://blog.csdn.net/jane_no1/article/details/53787873" target="_blank" rel="external">TwoWayLink</a></h3><blockquote>
<p>对于传统链表的反向遍历问题，在双向链表中能够得到很好的解决。双向链表即允许向前遍历，也允许反向遍历。因为在双向链表中，每一个链接点都有两个指向其它链接点的引用，一个指向下一个链接点，一个指向上一个链接点。而对于表头他也有first指向第一个链接点和last指向最后一个链接点两个引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data class TwoWayLink(var dData: Int, var next: TwoWayLink? = null, var previous: TwoWayLink? = null) &#123;</div><div class="line">    fun display() &#123;</div><div class="line">        print(&quot;$dData  &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line">class TwoWayLinkList(var first: TwoWayLink? = null, var last: TwoWayLink? = null) &#123;</div><div class="line">    fun isEmpty() = first == null</div><div class="line">    /**</div><div class="line">     * 从头部插入</div><div class="line">     */</div><div class="line">    fun pushFirst(dd: Int) &#123;</div><div class="line">        val link = TwoWayLink(dd,next = first)</div><div class="line">        if (isEmpty())</div><div class="line">            last = link</div><div class="line">        else</div><div class="line">            first?.previous = link</div><div class="line">        first = link</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从尾部插入</div><div class="line">     */</div><div class="line">    fun pushLast(dd: Int) &#123;</div><div class="line">        val link = TwoWayLink(dd)</div><div class="line">        if (isEmpty()) &#123;</div><div class="line">            first = link</div><div class="line">        &#125; else &#123;</div><div class="line">            last?.next = link</div><div class="line">            link.previous = last</div><div class="line">        &#125;</div><div class="line">        last = link</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据位置插入数据</div><div class="line">     */</div><div class="line">    fun pushAfter(key: Int, dd: Int): Boolean &#123;</div><div class="line">        var current = first</div><div class="line">        while (current?.dData != key) &#123;</div><div class="line">            current = current?.next</div><div class="line">            if (current == null)</div><div class="line">                return false</div><div class="line">        &#125;</div><div class="line">        val link = TwoWayLink(dd)</div><div class="line">        if (current == last) &#123;</div><div class="line">            link.next = null</div><div class="line">            last = link</div><div class="line">        &#125; else &#123;</div><div class="line">            link.next = current.next</div><div class="line">            current.next?.previous = link</div><div class="line">        &#125;</div><div class="line">        link.previous = current</div><div class="line">        current.next = link</div><div class="line">        return true</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据key删除数据</div><div class="line">     */</div><div class="line">    fun deleteByKey(key: Int): TwoWayLink? &#123;</div><div class="line">        var current = first</div><div class="line">        while (current?.dData != key) &#123;</div><div class="line">            current = current?.next</div><div class="line">            if (current == null)</div><div class="line">                return null</div><div class="line">        &#125;</div><div class="line">        if (current == first)</div><div class="line">            first = current.next</div><div class="line">        else</div><div class="line">            current.previous?.next = current.next</div><div class="line"></div><div class="line">        if (current == last)</div><div class="line">            last = current.previous</div><div class="line">        else</div><div class="line">            current.next?.previous = current.previous</div><div class="line">        return current</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从前向后显示</div><div class="line">     */</div><div class="line">    fun displayForward() &#123;</div><div class="line">        var current = first</div><div class="line">        while (current != null) &#123;</div><div class="line">            current.display()</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从后向前显示</div><div class="line">     */</div><div class="line">    fun displayBackward() &#123;</div><div class="line">        var current = last</div><div class="line">        while (current != null) &#123;</div><div class="line">            current.display()</div><div class="line">            current = current.previous</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从头部删除元素</div><div class="line">     */</div><div class="line">    fun deleteFirst(): TwoWayLink? &#123;</div><div class="line">        if (isEmpty())</div><div class="line">            return null</div><div class="line">        val temp = first</div><div class="line">        if (first?.next == null)</div><div class="line">            last = null</div><div class="line">        else</div><div class="line">            first?.next?.previous = null</div><div class="line">        first = first?.next</div><div class="line">        return temp</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从尾部删除元素</div><div class="line">     */</div><div class="line">    fun deleteLast(): TwoWayLink? &#123;</div><div class="line">        if (isEmpty())</div><div class="line">            return null</div><div class="line">        val temp = last</div><div class="line">        if (first?.next == null)</div><div class="line">            first = null</div><div class="line">        else</div><div class="line">            last?.previous?.next = null</div><div class="line">        last = last?.previous</div><div class="line">        return temp</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object&#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val linkList = TwoWayLinkList()</div><div class="line">            linkList.pushFirst(22)</div><div class="line">            linkList.pushFirst(44)</div><div class="line">            linkList.pushFirst(66)</div><div class="line"></div><div class="line">            linkList.pushLast(11)</div><div class="line">            linkList.pushLast(33)</div><div class="line">            linkList.pushLast(55)</div><div class="line">            linkList.displayForward()</div><div class="line">            linkList.displayBackward()</div><div class="line"></div><div class="line">            linkList.deleteFirst()</div><div class="line">            linkList.displayForward()</div><div class="line">            linkList.deleteLast()</div><div class="line">            linkList.displayForward()</div><div class="line">            linkList.deleteByKey(11)</div><div class="line">            linkList.displayForward()</div><div class="line">            linkList.pushAfter(22,88)</div><div class="line">            linkList.displayForward()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表-迭代器iterator"><a href="#链表-迭代器iterator" class="headerlink" title="链表_迭代器iterator"></a>链表_迭代器<a href="http://blog.csdn.net/jane_no1/article/details/53840114" target="_blank" rel="external">iterator</a></h3><blockquote>
<p>在链表中可以通过find()方法来查找到某一个特定的值，也可以通过delete方法删除某一个特定的值。这些操作都有一个搜索的工作，以找到特定的链接点。<br>在链表中进行一次某个值的查找删除或插入是简单的。但是现实中，经常会进行的是对某些特定的链接点的操作，而这些操作也都要进行搜索的工作。例如：要查找出所有某班成绩低于平均成绩的同学，要改变公司所有拥有最低工资的员工工资。这些都要进行搜索。<br>但是链表不是数组，链表没有下标，如果是数组的话，可以通过跟踪下标来确定当前搜索到的位置，当查找到第一个符合条件的值的同时，返回当前的下标，从而使得在继续查找下一个符合条件的值时，可以从该下标开始。链表不可以，链表在返回了符合条件的值后，必须从头开始查找下一个符合条件的值。如果有一个保存当前链接点的引用，在下一次查找时，从该引用的链接点进行步进，这样效率就会提高很多。<br>可能有人在说到“保存当前链接点的引用”时，就想到了在之前链表的介绍中，在链表类中定义的current，用current来存取一个链接点，然后使current递增，来移动到下一个链接点。<br>这种方法存在的一个问题是，只能进行一种引用。但是在现实中可能不止一个，就像经常要使用多个下标。并且需要引用的数目是未知的，所以这个引用不应该定义在链表内，而应该封装在一个独立的类中，并且这个类不能和链表相同。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class ILink(var dData:Int,var next:ILink?=null) &#123;</div><div class="line">    fun display()&#123;</div><div class="line">        print(&quot;$dData  &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">class ILinkList(var first: ILink? = null) &#123;</div><div class="line"></div><div class="line">    fun getFisrt() = first</div><div class="line"></div><div class="line">    fun setFirstData(link: ILink?) &#123;</div><div class="line">        first = link</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun isEmpty() = first == null</div><div class="line"></div><div class="line">    fun display() &#123;</div><div class="line">        var current = first</div><div class="line">        while (current != null) &#123;</div><div class="line">            current.display()</div><div class="line">            current = current.next</div><div class="line">        &#125;</div><div class="line">        println()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun getIterator() = LinkIterator(this)</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            val iLinkList = ILinkList()</div><div class="line">            val iterator = iLinkList.getIterator()</div><div class="line">            iterator.insertAfter(20)</div><div class="line">            iterator.insertAfter(40)</div><div class="line">            iterator.insertAfter(80)</div><div class="line">            iterator.insertBefore(60)</div><div class="line">            var flag = true</div><div class="line">            //s:显示链表内容，r:重置.n:移动到下一个节点,g:获取当前节点,b:在当前节点前插入,a:在当前节点之后插入,d:删除当前节点</div><div class="line">            while (flag) &#123;</div><div class="line">                println(&quot;亲，请输入中缀字符串：&quot;)</div><div class="line">                val bufferedReader = BufferedReader(InputStreamReader(System.`in`))</div><div class="line">                val input = bufferedReader.readLine()</div><div class="line">                if (input.isEmpty())</div><div class="line">                    return</div><div class="line">                when (input) &#123;</div><div class="line">                    &quot;s&quot; -&gt; iLinkList.display()</div><div class="line">                    &quot;r&quot; -&gt; iterator.reset()</div><div class="line">                    &quot;n&quot; -&gt; iterator.nextLink()</div><div class="line">                    &quot;g&quot; -&gt; iterator.getCurrentLink()</div><div class="line">                    &quot;b&quot; -&gt; iterator.insertBefore(100)</div><div class="line">                    &quot;a&quot; -&gt; iterator.insertAfter(200)</div><div class="line">                    &quot;d&quot; -&gt; iterator.deleteCurrent()</div><div class="line">                    &quot;e&quot; -&gt; flag = false</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class LinkIterator(val linkList: ILinkList, var current: ILink? = null, var previous: ILink? = null) &#123;</div><div class="line">    init &#123;</div><div class="line">        reset()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun reset() &#123;</div><div class="line">        current = linkList.getFisrt()</div><div class="line">        previous = null</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun isEnd() = current?.next == null</div><div class="line"></div><div class="line">    fun nextLink() &#123;</div><div class="line">        if(linkList.isEmpty()||isEnd())</div><div class="line">            return</div><div class="line">        previous = current</div><div class="line">        current = current?.next</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun getCurrentLink() = current</div><div class="line">    /**</div><div class="line">     * 在迭代器正在访问的节点之后插入一个新节点</div><div class="line">     */</div><div class="line">    fun insertAfter(dd: Int) &#123;</div><div class="line">        val iLink = ILink(dd)</div><div class="line">        if (linkList.isEmpty()) &#123;</div><div class="line">            linkList.setFirstData(iLink)</div><div class="line">            current = iLink</div><div class="line">        &#125; else &#123;</div><div class="line">            iLink.next = current?.next</div><div class="line">            current?.next = iLink</div><div class="line">            nextLink()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在迭代器正在访问的节点之前插入一个新节点</div><div class="line">     */</div><div class="line">    fun insertBefore(dd: Int) &#123;</div><div class="line">        val iLink = ILink(dd)</div><div class="line">        if (previous == null) &#123;</div><div class="line">            iLink.next = linkList.getFisrt()</div><div class="line">            linkList.setFirstData(iLink)</div><div class="line">            reset()</div><div class="line">        &#125; else &#123;</div><div class="line">            iLink.next = previous?.next</div><div class="line">            previous?.next = iLink</div><div class="line">            current = iLink</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun deleteCurrent() &#123;</div><div class="line">        if (current == null)</div><div class="line">            return</div><div class="line">        if (previous == null) &#123;</div><div class="line">            linkList.setFirstData(current?.next)</div><div class="line">            reset()</div><div class="line">        &#125; else &#123;</div><div class="line">            previous?.next = current?.next</div><div class="line">            if (isEnd())</div><div class="line">                reset()</div><div class="line">            else</div><div class="line">                current = current?.next</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归recursion"><a href="#递归recursion" class="headerlink" title="递归recursion"></a>递归<a href="http://www.cnblogs.com/renxiaoren/archive/2015/06/11/4568745.html" target="_blank" rel="external">recursion</a></h3><blockquote>
<p> 递归算法是一种直接或间接地调用自身的算法。在计算机编写程序中，递归算法对解决一大类问题是十分有效的，它往往使算法的描述简洁而且易于理解。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">object TriangleApp &#123;</div><div class="line">    @JvmStatic</div><div class="line">    fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">        var num = getNum()</div><div class="line">        num = triangle(num)</div><div class="line">        println(num)</div><div class="line">        multiplicationTable(9)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun triangle(num: Int): Int &#123;</div><div class="line">        if (num == 1)</div><div class="line">            return 1</div><div class="line">        return num.plus(triangle(num.minus(1)))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun multiplicationTable(num: Int) &#123;</div><div class="line">        if (num == 1) &#123;</div><div class="line">            println(&quot;1 * 1 = 1&quot;)</div><div class="line">        &#125; else &#123;</div><div class="line">            (1..num).forEach &#123;</div><div class="line">                print(&quot;$it * $num = $&#123;it * num&#125; &quot;)</div><div class="line">            &#125;</div><div class="line">            println()</div><div class="line">            multiplicationTable(num.minus(1))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    fun getNum(): Int &#123;</div><div class="line">        println(&quot;请输入一个数字：&quot;)</div><div class="line">        val reader = BufferedReader(InputStreamReader(System.`in`))</div><div class="line">        val readLine = reader.readLine()</div><div class="line">        return readLine.toInt()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>嵌套for循环 和  用递归实现 的比较:<br>栈 主要是用来存放栈帧的，每执行一个方法就会出现压栈操作，所以采用递归的时候产生的栈帧比较多，递归就会影响到内存，非常消耗内存，而使用for循环就执行了一个方法，压入栈帧一次，只存在一个栈帧，所以比较节省内存。</p>
</blockquote>
<h3 id="递归-归并排序RecursionSort"><a href="#递归-归并排序RecursionSort" class="headerlink" title="递归_归并排序RecursionSort"></a>递归_归并排序<a href="http://blog.csdn.net/jane_no1/article/details/53926037" target="_blank" rel="external">RecursionSort</a></h3><blockquote>
<p>归并排序是一种比简单排序快很多的排序算法，在之前介绍的简单排序比如冒泡排序、选择排序的时间都是O(N^2)，而归并排序只需要O(N*log(N))的时间。归并排序的实现相当容易。它的唯一的缺点就是需要在存储器中有一个与原数组相同大小的数组，如果初始的数组已经几乎占满了整个存储器，那么归并排序将是不可行的，不过如果存储器有足够的空间，那么这将是一个不错的选择。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">public class MergeSort &#123;</div><div class="line">    private int[] theArray;</div><div class="line">    private int nItem;</div><div class="line"></div><div class="line">    private MergeSort(int max) &#123;</div><div class="line">        theArray = new int[max];</div><div class="line">        nItem = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void insert(int value) &#123;</div><div class="line">        theArray[nItem++] = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void displayList() &#123;</div><div class="line">        for (int i = 0; i &lt; nItem; i++) &#123;</div><div class="line">            System.out.print(theArray[i] + &quot; &quot;);</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void mergeSort() &#123;</div><div class="line">        int[] workspace = new int[nItem];</div><div class="line">        recMergeSort(workspace, 0, nItem - 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 对半拆分数组</div><div class="line">     *</div><div class="line">     * @param workspace 零时数组</div><div class="line">     * @param lower     起始位置</div><div class="line">     * @param upper     结束位置</div><div class="line">     */</div><div class="line">    private void recMergeSort(int[] workspace, int lower, int upper) &#123;</div><div class="line">        if (lower == upper)</div><div class="line">            return;</div><div class="line">        int mid = (lower + upper) / 2; // 获取中间位置</div><div class="line">        recMergeSort(workspace, lower, mid);//拆分0到中间的(递归前半部分排序处理)</div><div class="line">        recMergeSort(workspace, mid + 1, upper);//拆分中间到末尾(递归后半部分排序处理)</div><div class="line">        merge(workspace, lower, mid + 1, upper); //合并数据</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 合并数据</div><div class="line">     *</div><div class="line">     * @param workspace 零时数组</div><div class="line">     * @param lowPtr    起始位置</div><div class="line">     * @param midPtr    中间位置</div><div class="line">     * @param upper     结束位置</div><div class="line">     */</div><div class="line">    private void merge(int[] workspace, int lowPtr, int midPtr, int upper) &#123;</div><div class="line">        int lower = lowPtr; //开始位置</div><div class="line">        int mid = midPtr - 1;//前半部分的中间位置</div><div class="line">        int n = upper - lowPtr + 1; //进行排序的数据项个数</div><div class="line">        int j = 0;</div><div class="line">        while (lowPtr &lt;= mid &amp;&amp; midPtr &lt;= upper)</div><div class="line">            // 左半部分的数据小于右半部分的数据，就放左边的数据，否则则相反</div><div class="line">            if (theArray[lowPtr] &lt; theArray[midPtr])</div><div class="line">                workspace[j++] = theArray[lowPtr++];//++表示移动数据下标</div><div class="line">            else</div><div class="line">                workspace[j++] = theArray[midPtr++];</div><div class="line">        //如果左边的数组还有数据没有排完(大数据)</div><div class="line">        while (lowPtr &lt;= mid)</div><div class="line">            workspace[j++] = theArray[lowPtr++];</div><div class="line">        //如果右边的数组还有数据没有排完(大数据)</div><div class="line">        while (midPtr &lt;= upper)</div><div class="line">            workspace[j++] = theArray[midPtr++];</div><div class="line">        //结果还原</div><div class="line">        for (j = 0; j &lt; n; j++)</div><div class="line">            theArray[lower + j] = workspace[j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MergeSort myArray = new MergeSort(10);</div><div class="line"></div><div class="line">        myArray.insert(80);</div><div class="line">        myArray.insert(38);</div><div class="line">        myArray.insert(49);</div><div class="line">        myArray.insert(25);</div><div class="line">        myArray.insert(3);</div><div class="line">        myArray.insert(75);</div><div class="line"></div><div class="line">        myArray.displayList();</div><div class="line">        myArray.mergeSort();</div><div class="line">        myArray.displayList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><blockquote>
<p>大O表示法，称一个函数g(n)是O(f(n))，当且仅当存在常数c&gt;0和n0&gt;=0，对一切n&gt;n0均有|g(n)|&lt;=c|f(n)|成立，也称函数g(n)以f(n)为界或者称g(n)囿于f(n)。记作g(n)=O(f(n))。<a href="http://www.baike.com/wiki/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="external">具体查看</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>标识</th>
<th>效率</th>
</tr>
</thead>
<tbody>
<tr>
<td>线性查找</td>
<td>O（N）</td>
<td>还可以</td>
</tr>
<tr>
<td>二分查找</td>
<td>O（log N）</td>
<td>良好</td>
</tr>
<tr>
<td>无序数组的插入</td>
<td>O（1）</td>
<td>优秀</td>
</tr>
<tr>
<td>有序数组的插入</td>
<td>O（N）</td>
<td>还可以</td>
</tr>
<tr>
<td>无序数组的删除</td>
<td>O（N）</td>
<td>还可以</td>
</tr>
<tr>
<td>有序数组的删除</td>
<td>O（N）</td>
<td>还可以</td>
</tr>
<tr>
<td>冒泡排序</td>
<td>O（N²）</td>
<td>差</td>
</tr>
<tr>
<td>选择排序</td>
<td>O（N²）</td>
<td>差</td>
</tr>
<tr>
<td>插入排序</td>
<td>O（N²）</td>
<td>差 &gt; 冒泡</td>
</tr>
<tr>
<td>链表</td>
<td>O（N）</td>
<td>插入快，查找和删除慢</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis基础用法]]></title>
      <url>/2017/04/19/Redis%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</p>
</blockquote>
<h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><blockquote>
<p>可以在Redis的官网去看<a href="http://www.redis.io" target="_blank" rel="external">教程</a>。Windows用户可以直接通过<a href="https://github.com/ServiceStack/redis-windows/tree/master/downloads" target="_blank" rel="external">github</a>下载,进行解压就可以直接使用（本文以Windows系统为主）。</p>
</blockquote>
<h3 id="Redis的目录结构"><a href="#Redis的目录结构" class="headerlink" title="Redis的目录结构"></a>Redis的目录结构</h3><ol>
<li>redis-server：Redis服务器</li>
<li>redis-cli：命令行客户端</li>
<li>redis-benchmark：Redis的性能测试工具</li>
<li>redis-check-aof：AOF文件修复工具</li>
<li>redis.windows.conf：Redis的配置文件(可以将配置文件中的daemonize修改成yes)</li>
</ol>
<h3 id="Redis的启动与停止"><a href="#Redis的启动与停止" class="headerlink" title="Redis的启动与停止"></a>Redis的启动与停止</h3><blockquote>
<p>启动：利用命令窗口进去redis所在文件执行redis-server，或者执行点击redis-server.exe。如果需要执行自定义配置文件，则需要redis-server redis.conf</p>
<p>停止：在redis的命令窗口(redis-cli)中执行shutdwon，或者结束Reids的进程</p>
</blockquote>
<h3 id="Redis的命令返回值"><a href="#Redis的命令返回值" class="headerlink" title="Redis的命令返回值"></a>Redis的命令返回值</h3><ol>
<li>状态回复：ping &gt; PONG 或者  SET key value &gt; OK</li>
<li>错误回复(以Error开头)：testerror &gt; (error) ERR unknown command ‘testerror’</li>
<li>整数回复(以Integer开头)：DBSIZE &gt; (integer) 3</li>
<li>字符串回复： GET key &gt; value/nil(标识为空)</li>
<li>多行字符串回复： KEYS * &gt; VALUES (获取数据库中存在的key)</li>
</ol>
<h3 id="Redis的配置选项"><a href="#Redis的配置选项" class="headerlink" title="Redis的配置选项"></a>Redis的配置选项</h3><ol>
<li>修改端口 服务端redis-server –port 6377 客服端redis-cli -p 6377</li>
<li>动态获取/设置配置选项的的值 CONFIG GET name：CONFIG GET loglevel; CONFIG SET name value</li>
<li>redis.conf相关<ul>
<li>port 6379 默认端口</li>
<li>bind 127.0.0.1 默认绑定的主机地址</li>
<li>time 0 当客户端闲置多久之后关闭连接，0表示没有启动这个选项</li>
<li>loglevel 日志级别(debug,verbose,notice,warning)默认是notice</li>
</ul>
</li>
<li>logfile ‘’/stdout 日志的记录方式，默认是标准输出</li>
<li>database 16 默认数据库的数量16个，数据库是从0开始，用SELECT 0…15 来切换数据库</li>
<li>save 900 1 save <seconds> <changes> 多少秒有多少次改变将其同步到磁盘中数据文件里</changes></seconds></li>
<li>rdbcompression yes 存储本地数据库时是否启用压缩。默认是启用</li>
<li>dbfilename dump.rdb 指定本地数据库的文件名。默认是dump.rdb</li>
<li>dir ./ 指定本地数据存放目录。默认是当前目录</li>
</ol>
<h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><h4 id="String字符串类型-一个键最多存储512MB"><a href="#String字符串类型-一个键最多存储512MB" class="headerlink" title="String字符串类型(一个键最多存储512MB)"></a>String字符串类型(一个键最多存储512MB)</h4><ol>
<li>添加语法: SET key value [EX seconds 设置过期时间秒] [PX milliseconds 设置过期时间毫秒] [NX只有键不存在的时候才设置功|XX只有键存在的时候才能设置],若果key存在同名会产生覆盖</li>
<li>获取语法: GET key ，键不存在返回nil，如果key不是字符串会报错</li>
<li>GETSET:设置指定key的值，并返回旧的值：GETSET key value 。键不存在返回nil，如果key不是字符串会报错</li>
<li>MSET: 一次设置多个键值对 MSET key vaule[key value ….];MSET test1 ‘test1’ test2 ‘test2’ test3 ‘test3’</li>
<li>MGET: 一个获取多个键值对 MGET key [key…];  MGET test1 test2 test3</li>
<li>STRLEN: 获取key字符串长度,STRLEN test1 如果key不存在返回的是0</li>
<li>SETRANGE:相当于字符串替换 SETRANGE key offset value value,如果设置的key原来的字符串长度要小于偏移量或者key不存在，就会以零字节(\x00)来填充 </li>
<li>GETRANGE: 返回字符串中的一部分 GETRANGE key start end（雷同java截取字符串）: GETRANGE test 0 -3;GETRANGE tes 1 2; GETRANGE test 0 1000</li>
<li>SETNX: 只有key不存在才能设置成功，SETNX key value,可以提前检查一下是否存在key(EXISTS key)</li>
<li>SETEX: 设置key的过期时间，属于原子性操作相当于执行了SET key value,又对这个key设置了过期时间EXPIRE key seconds, SETEX key second value.(可以利用TTL key查看过期时间)</li>
<li>MSETNX: 只有键名不存在才能设置成功， 一次设置多个键值对 MSETNX key vaule[key value ….];MSETNX test1 ‘test1’ test2 ‘test2’ test3</li>
<li>PSETEX: 以毫秒为单位设置key的生命周期，PSETEX key milliseconds value(利用PTTL查看剩余毫秒数)</li>
<li>INCR: 对key对应的数字+1 ,INCR key ,如果key不存在则默认为0后+1，如果vaule不是数字就会报错，</li>
<li>INCRBY: 将key对应的数字加上指定增量，INCRBY key num</li>
<li>INCRBYFLOAT: 将key对应的数字加上指定浮点数INCRBYFLOAT key 3.2(加减不是很精确)</li>
<li>DECR: 对key对应的数字-1 ,DECR key ,如果key不存在则默认为0后-1，如果vaule不是数字就会报错</li>
<li>DECRBY: 将key对应的数字减去指定增量，DECRBY key num</li>
<li>APPEND: 把值追加到字符串的末尾，APPEND key value,如果key不存在则执行SET操作</li>
</ol>
<h4 id="Hash类型-在配置文件中通过配置hash-max-ziplist-entries-512字节-hash-max-ziplist-value-64字段数"><a href="#Hash类型-在配置文件中通过配置hash-max-ziplist-entries-512字节-hash-max-ziplist-value-64字段数" class="headerlink" title="Hash类型(在配置文件中通过配置hash-max-ziplist-entries 512字节 hash-max-ziplist-value 64字段数)"></a>Hash类型(在配置文件中通过配置hash-max-ziplist-entries 512字节 hash-max-ziplist-value 64字段数)</h4><ol>
<li>HSET: 将哈希表key中域field设置成指定的value,HSET key fieldName value:HSET userInfo userName ‘lvtanxi’。如果哈希表中filed不存在，相当于新建filed，设置返回成功1，如果存在覆盖原值，成功返回0</li>
<li>HGET: 返回哈希表key中给定field的值,HGET key fieldName:HGET userInfo userName。如果key或者field不存在返回nil</li>
<li>HSETNX: 将哈希表中的域filed设置成指定的值，只有在filed不存在的时候才可以成功，如果存在则失败。HSETNX key fieldName value</li>
<li>HMSET: 将多个field-vaule设置到hash表key中，HMSET key fieldName vaule fieldName value</li>
<li>HMGET: 获取hash表key中field的value,HMGET key field filed ….</li>
<li>HGETall: 返回hash表key中的所有field-value, HGETALL key</li>
<li>HKEYS: 返回hash表key中所有的field， HKEYS key</li>
<li>HVALS: 返回hash表key中所有的value， HVALS key</li>
<li>HEXISTS: 检测hash中key的field是否存在，HEXISTS key fieldName</li>
<li>HLEN: 返回hash表key中的field的数量,HLEN key</li>
<li>HINCRBY: 给hash中的field做增量操作(必须是数值类型),HINCRBY key fieldName increment:HINCRBY userInfo age 3</li>
<li>HINCRBYFLOAT: 给hash中的field做增量浮点操作。HINCRBYFLOAT key fieldName increment:INCRBYFLOAT userInfo money 2.1</li>
<li>HDEL: 删除hash中key的指定域,可以删除一个或者多个。HDEL key field field </li>
</ol>
<h4 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h4><ol>
<li>LPUSH: 向列表左边添加元素，LPUSH key value value …</li>
<li>RPUSH: 向列表右边添加元素，RPUSH key value value …</li>
<li>LPUSHX: 向列表左边添加一个元素，但是key必须存在，LPUSHX key value </li>
<li>RPUSHX: 向列表右边添加一个元素，但是key必须存在，RPUSHX key value </li>
<li>LPOP: 将列表的头部元素弹出,返回弹出元素的值。LPOP key</li>
<li>RPOP: 将列表的末尾元素弹出,返回弹出元素的值。RPOP key</li>
<li>LLEN: 获取列表长度,LLEN key</li>
<li>LRANGE: 获取列表片段, LRANGE key startIndex endIndex,如果startIndex大于列表长度返回空列表</li>
<li>LREM: 删除列表中指定的值,LREM key count value：LREM mylist2 2 b<ul>
<li>count &gt; 0:从列表的头开始，向尾搜索，移除与value相等的元素，移除count个</li>
<li>count &lt; 0:从列表的尾开始，向头搜索，移除与value相等的元素，移除count个</li>
<li>count = 0:移除列表中所以与count相等的值</li>
</ul>
</li>
<li>LINDEX: 获取指定索引元素的值，LINDEX key index</li>
<li>LSET: 设置指定索引元素的值,给不存在的列表或者超出的index设值会报错，LSET key index value</li>
<li>LTRIM: 只保留列表的片段,LTRIM key startIndex endIndex</li>
<li>LRANGE: 获取列表片段，LRANGE key startIndex endIndex</li>
<li>LINSERT: 向列表中插入元素,LINSERT key BEFORE|AFTER 列表中的值 value </li>
<li>RPOPLPUSH: 将尾部元素从一个列表转移到另一个列表的头部，RPOPLPUSH source destination</li>
<li>BLPOP: 是LPOP的阻塞版本,BLOP key key timeout</li>
</ol>
<h4 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h4><ol>
<li>SADD: 向集合中添加元素,元素不能重复,SADD key number [,….]</li>
<li>SMEMBERS: 返回指定集合中的元素,SMEMBERS key</li>
<li>SISMEMBER: 检查value是否存在于结构,SISMEMBER key number</li>
<li>SREM: 删除集合中的一个或者多个成员，SREM key number [….]</li>
<li>SPOP: 删除并返回集合中的随机元素,SPOP key</li>
<li>SRANDMEMBER: 随机返回集合中的元素，SRANDMEMBER key count<ul>
<li>count为正数，而且小于集合中的元素的个数，返回一个随机的元素的集合数组</li>
<li>count为正数，而且大于集合中的元素的个数，返回整个集合</li>
<li>count为负数，数组中的成员可能出现重复，数组的长度是count的绝对值</li>
</ul>
</li>
<li>SDIFF: 返回集合之间的差集。SDIFF key key(谁写在前面就显示谁的)</li>
<li>SINTER: 返回集合之间的交集。SINTER key key ….</li>
<li>SUNION: 返回几个中并集操作。SUNION key key ….</li>
<li>SCARD: 得到集合的长度，SCARD key</li>
<li>SDIFFSTORE: 将差集结果保存到指定集合中，SDIFFSTORE newKey key key …..</li>
<li>SINTERSTORE: 将交集结果保存到指定集合中，SINTERSTORE newKey key key …..</li>
<li>SUNIONSTORE: 将并集的结果保存到指定集合中，SUNIONSTORE newKey key key …..</li>
<li>SMOVE: 将集合中的元素移动到另外一个集合中，SMOVE sourece des 元素： SMOVE testSet course 4</li>
</ol>
<h4 id="Zset类型-有序集合-当元素的分数相同时，Redis安装ASCII码来排序"><a href="#Zset类型-有序集合-当元素的分数相同时，Redis安装ASCII码来排序" class="headerlink" title="Zset类型(有序集合,当元素的分数相同时，Redis安装ASCII码来排序)"></a>Zset类型(有序集合,当元素的分数相同时，Redis安装ASCII码来排序)</h4><ol>
<li>ZADD：将元素及其分数添加到几个中。ZADD key score number</li>
<li>ZSCORE：获取指定元素的分数。ZSCORE key number</li>
<li>ZRANGE：按照元素分数从小到大的顺序返回指定索引start到stop之间的元素(包含两端)，ZRANGE key start stop [WITHSCORES]</li>
<li>ZREVRANGE：和ZRANGE相反。ZREVRANGE key start stop [WITHSCORES]</li>
<li>ZRANGEBYSCORE：获取指定分数内的元素，从小到大。ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]。可以通过(不包含端点。</li>
<li>ZREVRANGEBYSCORE：与ZRANGEBYSCORE相反。ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</li>
<li>ZINCRBY：操作某个元素的分数，返回操作后的分数，ZINCRBY key increment member :ZINCRBY php 2 test</li>
<li>ZCARD：获取指定key的元素个数。 ZCARD key</li>
<li>ZCOUNT：获取指定分数内的个数。ZCOUNT key min max。可以通过(不包含端点。</li>
<li>ZREM：删除一个或者多个元素，返回删除元素个数，ZREM key number number。。。。</li>
<li>ZREMRANGEBYRANK：按照排名范围删除元素，按照分数从小到大的顺序删除指定的排名范围内元素,ZREMRANGEBYRANK key start stop</li>
<li>ZREMRANGEBYSCORE：按照分数范围删除元素，ZREMRANGEBYSCORE key min max</li>
<li>ZRANK：获取指定元素的排名，根据分数从小到大，ZRANK key number</li>
<li>ZREVRANK：获取指定元素的排名，根据分数从大到小，ZREVRANK key number</li>
<li>ZINTERSTORE：计算有序集合并保存起来， ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</li>
</ol>
<h3 id="Redis与key相关的命令"><a href="#Redis与key相关的命令" class="headerlink" title="Redis与key相关的命令"></a>Redis与key相关的命令</h3><ol>
<li>KEYS: 返回所有符合给定通配符的key, KEYS pattern: KEYS *(匹配任意个字符)/?(匹配一个任意字符)/<a href="匹配[]之间的一个字符"></a>/\X(特殊字符转意)</li>
<li>EXISTS: 检测指定key是否存在,EXISTS key</li>
<li>TYPE: 返回key所存储的类型,TYPE key</li>
<li>EXPIRE: 设置key的过期时间，EXPIRE key seconds。如果key已经存在过期时间，再通过EXPIRE设置会覆盖</li>
<li>EXPIREAT: 在指定时间戳过期,EXPIREAR key timestamp: EXPIREAT page 1492586655</li>
<li>PEXPIRE: 以毫秒设置key的过期时间，PEXPIRE key milliseconds</li>
<li>PEXPIREAT: 在指定时间戳过期,单位是毫秒，PEXPIREAT key timestamp:PEXPIREAT page 1492586990000000</li>
<li>TTL: 以秒位单位返回key的剩余时间。TTL key ,若果key没设置过期时间返回-1，如果key不存在返回-2</li>
<li>PTTL: 以毫秒为单位返回可以的剩余时间。PTTL key,若果key没设置过期时间返回-1，如果key不存在返回-2</li>
<li>PERSIST: 将一个带过期时间的key转变成永久的key,PERSIST key</li>
<li>DEL: 删除一个key,返回成功删除数量,DEL key key …</li>
<li>RANDOMKEY: 随机的行当前数据中获取一个key, RANDOMKEY</li>
<li>RENAME: 给一个key重命名 RENAME key newKey,如果名称没发生改变会报错</li>
<li>RENAMENX: 如果新名称不存在，才会执行Rename,RENAMENX key newKey</li>
<li>DUMP: 序列化给定的key,返回序列化之后的值，DUMP key</li>
<li>RESTORE: 反序列化，RESTORE key 时间毫秒(可以为0) value</li>
<li>MOVE: 将当前数据库中的key移动到另外的数据库,MOVE key dbID。移动一个不存在的key或者已经存在了的key会失败，</li>
<li>OBJECT,SACAN,SORT</li>
</ol>
<blockquote>
<p>这里还有其他的平台提供的Redis命令可以参考。<a href="http://doc.redisfans.com/index.html" target="_blank" rel="external">查看</a>,<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">菜鸟教程</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java-解析Xml的四种方式]]></title>
      <url>/2017/04/06/Java-%E8%A7%A3%E6%9E%90Xml%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 现在的开发过程中往往是前后端分析，那么传输数据的方式就有很多的选择。例如：XML或者Json。这两者的优缺点我就不去探究了。我主要是讲讲用Java解析XML的四种方法</p>
</blockquote>
<h2 id="四种方法与优缺点与实现"><a href="#四种方法与优缺点与实现" class="headerlink" title="四种方法与优缺点与实现"></a>四种方法与优缺点与实现</h2><blockquote>
<p>本文中所用到的xml都是这一个。如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;bookstore&gt;</div><div class="line">&lt;book id=&quot;1&quot;&gt;</div><div class="line">    &lt;name&gt;我要自由&lt;/name&gt;</div><div class="line">    &lt;author&gt;乔治马丁&lt;/author&gt;</div><div class="line">    &lt;year&gt;2014&lt;/year&gt;</div><div class="line">    &lt;price&gt;89&lt;/price&gt;</div><div class="line">&lt;/book&gt;</div><div class="line">&lt;book id=&quot;2&quot;&gt;</div><div class="line">    &lt;name&gt;安徒生通话&lt;/name&gt;</div><div class="line">    &lt;year&gt;2004&lt;/year&gt;</div><div class="line">    &lt;price&gt;77&lt;/price&gt;</div><div class="line">    &lt;language&gt;English&lt;/language&gt;</div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/bookstore&gt;</div></pre></td></tr></table></figure>
<h4 id="DOM解析-Java自带"><a href="#DOM解析-Java自带" class="headerlink" title="DOM解析(Java自带)"></a>DOM解析(Java自带)</h4><blockquote>
<p>DOM是html和xml的应用程序接口(API)，以层次结构（类似于树型）来组织节点和信息片段，映射XML文档的结构，允许获取和操作文档的任意部分，是W3C的官方标准。</p>
</blockquote>
<h6 id="nbsp-优点"><a href="#nbsp-优点" class="headerlink" title="&nbsp;优点"></a>&nbsp;优点</h6><pre><code>1. 允许应用程序对数据和结构做出更改。

2. 访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。
</code></pre><h6 id="nbsp-缺点"><a href="#nbsp-缺点" class="headerlink" title="&nbsp;缺点"></a>&nbsp;缺点</h6><pre><code>1. 通常需要加载整个XML文档来构造层次结构，消耗资源大。
</code></pre><h6 id="nbsp-实现"><a href="#nbsp-实现" class="headerlink" title="&nbsp;实现"></a>&nbsp;实现</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public class DomReadXml &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //创建一个DocumentBuilderFactory的对象</div><div class="line">        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">        try &#123;</div><div class="line">            //创建DocumentBuilder对象</div><div class="line">            DocumentBuilder builder = dbf.newDocumentBuilder();</div><div class="line">            //通过DocumentBuilder的parse加载xml文件</div><div class="line">            Document document = builder.parse(&quot;ReadXml/books.xml&quot;);</div><div class="line">            //根据标签名获取标签</div><div class="line">            NodeList nodeList = document.getElementsByTagName(&quot;book&quot;);</div><div class="line">            int length = nodeList.getLength();</div><div class="line">            System.out.println(&quot;一共有&quot;+length+&quot;本书&quot;);</div><div class="line">            //这是不知道属性的情况下完成</div><div class="line">            readNode(nodeList);</div><div class="line">            //知道属性的情况</div><div class="line">      /*      Element element;</div><div class="line">            for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">                element= (Element) nodeList.item(i);</div><div class="line">                System.out.println(&quot;id的属性值是：&quot;+element.getAttribute(&quot;id&quot;));</div><div class="line">            &#125;*/</div><div class="line"></div><div class="line">        &#125; catch (ParserConfigurationException | SAXException | IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void readNode(NodeList nodeList) &#123;</div><div class="line">        //遍历每一个获取到的节点</div><div class="line">        if (nodeList == null)</div><div class="line">            return;</div><div class="line">        int length = nodeList.getLength();</div><div class="line">        Node node;</div><div class="line">        NamedNodeMap nodeAttributes;</div><div class="line">        Node attrItem;</div><div class="line">        for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">            node = nodeList.item(i);</div><div class="line">            //区分出text类型的node一集element类型的node</div><div class="line">            if(node.getNodeType()!=Node.ELEMENT_NODE)</div><div class="line">                continue;</div><div class="line">            //获取节点属性</div><div class="line">            nodeAttributes = node.getAttributes();</div><div class="line">            //这里需要注意getNodeValue不是自己的nodeValue而是第一个子节点的nodeValue，还要注意与getTextContent的区别</div><div class="line">            System.out.println(node.getNodeName() + &quot;&gt;&gt;&quot; + node.getFirstChild().getNodeValue());</div><div class="line">            if (nodeAttributes != null) &#123;</div><div class="line">                //遍历属性</div><div class="line">                int nodeAttributesLength = nodeAttributes.getLength();</div><div class="line">                for (int j = 0; j &lt; nodeAttributesLength; j++) &#123;</div><div class="line">                    //获取某一个属性</div><div class="line">                    attrItem = nodeAttributes.item(j);</div><div class="line">                    System.out.println(attrItem.getNodeName() + &quot;:&quot; + attrItem.getNodeValue());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            //递归</div><div class="line">            readNode(node.getChildNodes());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SAX解析-Java自带"><a href="#SAX解析-Java自带" class="headerlink" title="SAX解析(Java自带)"></a>SAX解析(Java自带)</h4><blockquote>
<p>流模型中的”推”模型分析方式。通过事件驱动，每发现一个节点就引发一个事件，事件推给事件处理器，通过回调方法完成解析工作，解析XML文档的逻辑需要应用程序完成</p>
</blockquote>
<h6 id="nbsp-优点-1"><a href="#nbsp-优点-1" class="headerlink" title="&nbsp;优点"></a>&nbsp;优点</h6><pre><code>1. 不需要等待所有数据都被处理，分析就能立即开始。

2. 只在读取数据时检查数据，不需要保存在内存中。

3. 可以在某个条件得到满足时停止解析，不必解析整个文档。

4. 效率和性能较高，能解析大于系统内存的文档
</code></pre><h6 id="nbsp-缺点-1"><a href="#nbsp-缺点-1" class="headerlink" title="&nbsp;缺点"></a>&nbsp;缺点</h6><pre><code>1. 需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。

2. 单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。
</code></pre><h6 id="nbsp-实现-1"><a href="#nbsp-实现-1" class="headerlink" title="&nbsp;实现"></a>&nbsp;实现</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">public class SaxReadXml &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //获取SAXParserFactory的实例</div><div class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</div><div class="line">        try &#123;</div><div class="line">            //通过SAXParserFactory获取SAXParser</div><div class="line">            SAXParser saxParser = factory.newSAXParser();</div><div class="line">            saxParser.parse(&quot;ReadXml/books.xml&quot;, new SAXParserHander());</div><div class="line">        &#125; catch (ParserConfigurationException | SAXException | IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class SAXParserHander extends DefaultHandler &#123;</div><div class="line">        int bookIndex;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * xml的开始标签</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123;</div><div class="line">            super.startElement(uri, localName, qName, attributes);</div><div class="line">            //获取属性个数</div><div class="line">            int length = attributes.getLength();</div><div class="line">            if (length &gt; 0) &#123;</div><div class="line">                bookIndex++;</div><div class="line">                System.out.println(&quot;开始解析第&quot; + bookIndex + &quot;本书&quot;);</div><div class="line">           /*    //已经知道属性的名称这可以这样做</div><div class="line">               String id = attributes.getValue(&quot;id&quot;);</div><div class="line">               System.out.println(&quot;book的屬性值是：&quot;+id);*/</div><div class="line">                for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">                    //获取属性名称与属性值</div><div class="line">                   String nodeName = attributes.getQName(i);</div><div class="line">                    System.out.println(nodeName + &quot; 的属性值是：&quot; + attributes.getValue(nodeName));</div><div class="line">                &#125;</div><div class="line">            &#125; else if (!&quot;bookstore&quot;.equals(qName)) &#123;</div><div class="line">                System.out.print(&quot;节点名：&quot; + qName);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * xml的结束标签</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void endElement(String uri, String localName, String qName) throws SAXException &#123;</div><div class="line">            super.endElement(uri, localName, qName);</div><div class="line">            //判断是否针对一本书已经遍历结束</div><div class="line">            if (&quot;book&quot;.endsWith(qName)) &#123;</div><div class="line">                System.out.println(&quot;解析完第&quot; + bookIndex + &quot;本书&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * 解析开始</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void startDocument() throws SAXException &#123;</div><div class="line">            super.startDocument();</div><div class="line">            System.out.println(&quot;SAX解析开始&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 解析结束</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void endDocument() throws SAXException &#123;</div><div class="line">            super.endDocument();</div><div class="line">            System.out.println(&quot;SAX解析结束&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 获取节点值</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void characters(char[] ch, int start, int length) throws SAXException &#123;</div><div class="line">            super.characters(ch, start, length);</div><div class="line">            String value = new String(ch, start, length);</div><div class="line">            if (!&quot;&quot;.equals(value.trim())) &#123;//主要是解决输出控制的情况</div><div class="line">                System.out.println(&quot; 节点值是：&quot; + value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JDOM解析-需要jdom的jar"><a href="#JDOM解析-需要jdom的jar" class="headerlink" title="JDOM解析(需要jdom的jar)"></a>JDOM解析(需要jdom的jar)</h4><blockquote>
<p>Java特定的文档对象模型。自身不包含解析器，使用SAX</p>
</blockquote>
<h6 id="nbsp-优点-2"><a href="#nbsp-优点-2" class="headerlink" title="&nbsp;优点"></a>&nbsp;优点</h6><pre><code>1. 使用具体类而不是接口，简化了DOM的API。

2. 大量使用了Java集合类，方便了Java开发人员。
</code></pre><h6 id="nbsp-缺点-2"><a href="#nbsp-缺点-2" class="headerlink" title="&nbsp;缺点"></a>&nbsp;缺点</h6><pre><code>1. 没有较好的灵活性。

2. 性能较差。
</code></pre><h6 id="nbsp-实现-2"><a href="#nbsp-实现-2" class="headerlink" title="&nbsp;实现"></a>&nbsp;实现</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class JdomReadXml &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //创建SAXBuilder对象</div><div class="line">        SAXBuilder saxBuilder = new SAXBuilder();</div><div class="line">        InputStream inputStream = null;</div><div class="line">        InputStreamReader inputStreamReader=null;</div><div class="line">        try &#123;</div><div class="line">            //创建一个输入流，加载xml</div><div class="line">            inputStream = new FileInputStream(&quot;ReadXml/books.xml&quot;);</div><div class="line">            //这样做可以解决乱码的问题</div><div class="line">            inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);</div><div class="line">            //通过SAXBuilder的build方法，把输入流加载到通过SAXBuilder的build方法中</div><div class="line">            Document document = saxBuilder.build(inputStreamReader);</div><div class="line">            //通过Document获取根节点</div><div class="line">            Element rootElement = document.getRootElement();</div><div class="line">            readXml(rootElement);</div><div class="line">        &#125; catch (JDOMException | IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (null != inputStream)</div><div class="line">                try &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            if (null != inputStreamReader)</div><div class="line">                try &#123;</div><div class="line">                    inputStreamReader.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void readXml(Element element) &#123;</div><div class="line">        //获取节点的子节点</div><div class="line">        List&lt;Element&gt; childrens = element.getChildren();</div><div class="line">        for (Element children : childrens) &#123;</div><div class="line">            //获取所有属性</div><div class="line">            List&lt;Attribute&gt; attributes = children.getAttributes();</div><div class="line">            for (Attribute attribute : attributes) &#123;</div><div class="line">                //获取属性名称以及属性值</div><div class="line">                System.out.println(attribute.getName()+&quot;的属性值是:&quot;+attribute.getValue());</div><div class="line">            &#125;</div><div class="line">            //获取节点名称与节点值</div><div class="line">            if(attributes.size()==0)</div><div class="line">                System.out.println(children.getName()+&quot;的值是：&quot;+children.getValue());</div><div class="line">            readXml(children);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DOM4J解析-需要dom4j的jar"><a href="#DOM4J解析-需要dom4j的jar" class="headerlink" title="DOM4J解析(需要dom4j的jar)"></a>DOM4J解析(需要dom4j的jar)</h4><blockquote>
<p>简单易用，采用Java集合框架，并完全支持DOM、SAX和JAXP</p>
</blockquote>
<h6 id="nbsp-优点-3"><a href="#nbsp-优点-3" class="headerlink" title="&nbsp;优点"></a>&nbsp;优点</h6><pre><code>1. 大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。

2. 支持XPath。

3. 有很好的性能。
</code></pre><h6 id="nbsp-缺点-3"><a href="#nbsp-缺点-3" class="headerlink" title="&nbsp;缺点"></a>&nbsp;缺点</h6><pre><code>1. 大量使用了接口，API较为复杂。
</code></pre><h6 id="nbsp-实现-3"><a href="#nbsp-实现-3" class="headerlink" title="&nbsp;实现"></a>&nbsp;实现</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class Dom4jReadXml &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //创建 SAXReader 对象</div><div class="line">        SAXReader saxReader = new SAXReader();</div><div class="line">        try &#123;</div><div class="line">            //通过SAXReader的read方法加载xml,获取Document</div><div class="line">            Document document = saxReader.read(new File(&quot;ReadXml/books.xml&quot;));</div><div class="line">            //通过document获取根节点</div><div class="line">            Element rootElement = document.getRootElement();</div><div class="line">            readXml(rootElement);</div><div class="line">        &#125; catch (DocumentException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void readXml(Element element) &#123;</div><div class="line">        //获取子节点迭代器</div><div class="line">        Iterator iterator = element.elementIterator();</div><div class="line">        while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</div><div class="line">            //获取子节点</div><div class="line">            Element child = (Element) iterator.next();</div><div class="line">            //获取属性</div><div class="line">            Iterator attributeIterator = child.attributeIterator();</div><div class="line">            while (attributeIterator.hasNext())&#123;</div><div class="line">                DefaultAttribute attribute = (DefaultAttribute) attributeIterator.next();</div><div class="line">                System.out.println(attribute.getName()+&quot;的属性值是:&quot;+attribute.getValue());</div><div class="line">            &#125;</div><div class="line">            if(child.attributeCount()==0)</div><div class="line">                System.out.println(child.getName()+&quot;&gt;&gt;&quot;+child.getTextTrim());</div><div class="line">            readXml(child);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote>
<p>还有很多其他解析xml的方式，这里就不一一赘述了。感谢大家。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务摘要]]></title>
      <url>/2017/03/23/Spring%E4%BA%8B%E5%8A%A1%E6%91%98%E8%A6%81/</url>
      <content type="html"><![CDATA[<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务指的是逻辑上的一组操作，这组操作要么一起成功，要么全部失败。</p>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><ul>
<li>原子性：指事务时一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li>
<li>一致性：指事务前后数据的完整性必须保持一致</li>
<li>隔离性：指多个用户并发访问数据库，一个事务不能干扰其他事务的执行</li>
<li>持久性：指一个事务一旦被提交，他对数据库中数据的改变是永久性的。</li>
</ul>
<h2 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h2><p>Spring事务管理抽象主要包括3个接口：PlatformTransactionManager(事务管理器)、TransactionDefinition(事务定义信息。如：隔离、传播、超时、只读)、TransactionStatus(事务具体运行状态)</p>
<h2 id="五种事务隔离级别"><a href="#五种事务隔离级别" class="headerlink" title="五种事务隔离级别"></a>五种事务隔离级别</h2><ol>
<li>DEFAULT 使用后端数据库默认的隔离级别</li>
<li>READ_UNCOMMITTED 允许你读取还未提交的改变了的数据。可能导致脏读、幻读、不可重复读</li>
<li>READ_COMMITTED 允许在并发事务已经提交后读取。可防止脏读，但幻读和不可重复读仍可能发生</li>
<li>REPEATABLE_READ 对相同字段的多次读取是一致的，除非数据被事务本身改变，科防止脏读、不可重复读，但幻读仍可能发生</li>
<li>SERIALIZABLE 完全服从ACID的隔离级别，确保不发生脏读、幻读、不可重复读。这在所有的隔离中是最慢的，它是典型的通过完全锁定在事务中涉及的数据表来完成的，</li>
</ol>
<h2 id="七种事务传播行为（重点是1、3、7点）"><a href="#七种事务传播行为（重点是1、3、7点）" class="headerlink" title="七种事务传播行为（重点是1、3、7点）"></a>七种事务传播行为（重点是1、3、7点）</h2><ol>
<li>PROPAGATION_REQUIRED 支持当前事务，如果不存在就新建一个</li>
<li>PROPAGATION_SUPPORTS 支持当前事务，如果不存在，就不使用事务</li>
<li>PROPAGATION_MANDATORY 支持当前事务，如果不存在，抛出异常</li>
<li>PROPAGATION_REQUIRES_NEW 如果有事务存在，挂起当前事务，创建一个新事务</li>
<li>PROPAGATION_NEVER  以非事务方式运行，如果有事务，抛出异常</li>
<li>PROPAGATION_NOT_SUPPORTED 以非事务方式运行，如果有事务存在，挂起当前事务</li>
<li>PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Spring-boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring-boot部署外部tomcat]]></title>
      <url>/2017/03/07/Spring-boot%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8tomcat/</url>
      <content type="html"><![CDATA[<p>spring-boot默认提供内嵌的tomcat，所以打包直接生成jar包，用java -jar命令就可以启动。但是，有时候我们更希望一个tomcat来管理多个项目，这种情况下就需要项目是war格式的包而不是jar格式的包。</p>
<p>spring-boot同样提供了解决方案，只需要简单的几步更改就可以了，这里提供maven项目的解决方法：</p>
<ul>
<li>添加一个类来继承SpringBootServletInitializer。如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</div><div class="line">		return application.sources(DemoApplication.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在pom.xml文件中，project下面修改package标签(如果新建项目就是使用的war就不用这一步了)。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;groupId&gt;com.lv&lt;/groupId&gt;</div><div class="line">    ...</div><div class="line">&lt;packaging&gt;war&lt;/packaging&gt;</div></pre></td></tr></table></figure>
<ul>
<li>还是在pom.xml文件中，dependencies下面添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>利用内置Tomcat进行测试。命令如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn spring-boot:run</div></pre></td></tr></table></figure>
<ul>
<li>打成war包，放置到Tomcat的webapps中(个人在Tomcat7上失败了，使用的是Tomcat8)。打包命令如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mvn -P test(环境) package</div><div class="line">//或者</div><div class="line">mvn package</div></pre></td></tr></table></figure>
<ul>
<li>启动Tomcat，访问<a href="http://localhost:Tomcat端口/项目名称/Controller" target="_blank" rel="external">http://localhost:Tomcat端口/项目名称/Controller</a> Mapping</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spring-boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 开发工程师面试指南]]></title>
      <url>/2017/02/22/Android%E5%9F%BA%E7%A1%80%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<p>《Android 开发工程师面试指南 LearningNotes 》，作者是知乎Android开发工程师陶程，由梁观全贡献部分。大家可以去知乎关注这两位用心的少年。这份指南包含了大部分Android开发的基础、进阶知识，不仅可以帮助准备面试的同学，也可以帮助正在学习和工作的同学梳理自己的知识点。有心的同学也可以帮他们不断完善。</p>
<h1 id="LearningNotes"><a href="#LearningNotes" class="headerlink" title="LearningNotes"></a>LearningNotes</h1><hr>
<h2 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h2><ul>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part1/Android" target="_blank" rel="external">Android(安卓)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android基础知识.md" target="_blank" rel="external">Android基础知识</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android内存泄漏总结.md" target="_blank" rel="external">Android内存泄漏总结</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Handler内存泄漏分析及解决.md" target="_blank" rel="external">Handler内存泄漏分析及解决</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/线程通信基础流程分析.md" target="_blank" rel="external">Handler、Looper、Message、MessageQueue基础流程分析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android性能优化.md" target="_blank" rel="external">Android性能优化</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Listview详解.md" target="_blank" rel="external">ListView详解</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Recyclerview和Listview的异同.md" target="_blank" rel="external">RecyclerView和ListView的异同</a></li>
</ul>
</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Asynctask源码分析.md" target="_blank" rel="external">AsyncTask源码分析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/插件化技术学习.md" target="_blank" rel="external">插件化技术</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/自定义控件.md" target="_blank" rel="external">自定义控件</a></li>
<li><a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">事件分发机制</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/ANR问题.md" target="_blank" rel="external">ANR问题</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Art和Dalvik区别.md" target="_blank" rel="external">Art和Dalvik的区别</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android关于oom的解决方案.md" target="_blank" rel="external">Android关于OOM的解决方案</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Fragment.md" target="_blank" rel="external">Fragment</a></li>
<li><a href="https://github.com/xxv/android-lifecycle" target="_blank" rel="external">Activity&amp;Fragment</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/SurfaceView.md" target="_blank" rel="external">SurfaceView</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android几种进程.md" target="_blank" rel="external">Android几种进程</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/APP启动过程.md" target="_blank" rel="external">APP启动过程</a></li>
<li>Activity启动流程以及界面展示过程</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android图片中的三级缓存.md" target="_blank" rel="external">图片三级缓存</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Bitmap的分析与使用.md" target="_blank" rel="external">Bitmap的分析与使用</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/热修复技术.md" target="_blank" rel="external">热修复的原理</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/AIDL.md" target="_blank" rel="external">AIDL</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Binder机制.md" target="_blank" rel="external">Binder机制</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Zygote和System进程的启动过程.md" target="_blank" rel="external">Zygote和System进程的启动过程</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/MVC%2CMVP%2CMVVM的区别.md" target="_blank" rel="external">Android中的MVC，MVP和MVVM</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/MVP.md" target="_blank" rel="external">MVP</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Android开机过程.md" target="_blank" rel="external">Android开机过程</a></li>
<li><a href="http://www.jianshu.com/p/c1a3a881a144" target="_blank" rel="external">Retrofit源码分析</a></li>
<li><a href="http://frodoking.github.io/2015/10/10/android-glide/" target="_blank" rel="external">Glide源码分析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/EventBus用法详解.md" target="_blank" rel="external">EventBus用法详解</a></li>
<li><a href="http://p.codekk.com/blogs/detail/54cfab086c4761e5001b2538" target="_blank" rel="external">EventBus源码分析</a></li>
<li><a href="http://www.open-open.com/lib/view/open1438065400878.html" target="_blank" rel="external">Android ORM 框架之 greenDAO 使用心得</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/developer/2015/0606/3005.html" target="_blank" rel="external">Data Binding（数据绑定）用户指南</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">RxJava</a></li>
<li>设计一套图片异步加载缓存方案</li>
<li>Android UI适配</li>
<li><a href="http://wuxiaolong.me/categories/Gradle/" target="_blank" rel="external">Gradle</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/查漏补缺.md" target="_blank" rel="external">查漏补缺</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/Android/Git操作.md" target="_blank" rel="external">Git操作</a></li>
</ul>
</li>
</ul>
<p>=======</p>
<hr>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part1/DesignPattern" target="_blank" rel="external">DesignPattern(设计模式)</a></li>
</ul>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/常见的面向对象设计原则.md" target="_blank" rel="external">面向对象六大原则</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/单例模式.md" target="_blank" rel="external">单例模式</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/Builder模式.md" target="_blank" rel="external">Builder模式</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/原型模式.md" target="_blank" rel="external">原型模式</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/简单工厂.md" target="_blank" rel="external">简单工厂</a></li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/策略模式.md" target="_blank" rel="external">策略模式</a></li>
<li>状态模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/责任链模式.md" target="_blank" rel="external">责任链模式</a></li>
<li>解释器模式</li>
<li>命令模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/观察者模式.md" target="_blank" rel="external">观察者模式</a></li>
<li>备忘录模式</li>
<li>迭代器模式</li>
<li>模板方法模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/代理模式.md" target="_blank" rel="external">代理模式</a></li>
<li>组合模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/适配器模式.md" target="_blank" rel="external">适配器模式</a></li>
<li>装饰模式</li>
<li>享元模式</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part1/DesignPattern/外观模式.md" target="_blank" rel="external">外观模式</a></li>
<li>桥接模式</li>
</ul>
</li>
</ul>
<hr>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><ul>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part2/JavaSE" target="_blank" rel="external">JavaSE(Java基础)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Java基础知识.md" target="_blank" rel="external">Java基础知识</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Java中的内存泄漏.md" target="_blank" rel="external">Java中的内存泄漏</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/String源码分析.md" target="_blank" rel="external">String源码分析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Java集合框架.md" target="_blank" rel="external">Java集合框架</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/ArrayList源码剖析.md" target="_blank" rel="external">ArrayList源码剖析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/LinkedList源码剖析.md" target="_blank" rel="external">LinkedList源码剖析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Vector源码剖析.md" target="_blank" rel="external">Vector源码剖析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashMap源码剖析.md" target="_blank" rel="external">HashMap源码剖析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashTable源码剖析.md" target="_blank" rel="external">HashTable源码剖析</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/LinkedHashMap源码剖析.md" target="_blank" rel="external">LinkedHashMap源码剖析</a></li>
</ul>
</li>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part2/JVM" target="_blank" rel="external">JVM(Java虚拟机)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JVM/JVM.md" target="_blank" rel="external">JVM基础知识</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JVM/JVM类加载机制.md" target="_blank" rel="external">JVM类加载机制</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JVM/Java内存区域与内存溢出.md" target="_blank" rel="external">Java内存区域与内存溢出</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JVM/垃圾回收算法.md" target="_blank" rel="external">垃圾回收算法</a></li>
</ul>
</li>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/Java并发.md" target="_blank" rel="external">JavaConcurrent(Java并发)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/Java并发基础知识.md" target="_blank" rel="external">Java并发基础知识</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/生产者和消费者问题.md" target="_blank" rel="external">生产者和消费者问题</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/Thread和Runnable实现多线程的区别.md" target="_blank" rel="external">Thread和Runnable实现多线程的区别</a> </li>
</ul>
</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/线程中断.md" target="_blank" rel="external">线程中断</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/守护线程与阻塞线程.md" target="_blank" rel="external">守护线程与阻塞线程</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/Synchronized.md" target="_blank" rel="external">synchronized</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/多线程环境中安全使用集合API.md" target="_blank" rel="external">多线程环境中安全使用集合API</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/实现内存可见的两种方法比较：加锁和volatile变量.md" target="_blank" rel="external">实现内存可见的两种方法比较：加锁和volatile变量</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/死锁.md" target="_blank" rel="external">死锁</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/可重入内置锁.md" target="_blank" rel="external">可重入内置锁</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/使用wait:notify:notifyall实现线程间通信.md" target="_blank" rel="external">使用wait/notify/notifyAll实现线程间通信</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaConcurrent/NIO.md" target="_blank" rel="external">NIO</a></li>
</ul>
<hr>
</li>
</ul>
<h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part3/DataStructure" target="_blank" rel="external">DataStructure(数据结构)</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/DataStructure/数组.md" target="_blank" rel="external">数组</a></li>
<li>链表</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/DataStructure/栈和队列.md" target="_blank" rel="external">栈和队列</a></li>
<li>字符串</li>
<li>树</li>
<li>图</li>
</ul>
</li>
<li><p><a href="">Algorithm(算法)</a></p>
<ul>
<li><a href="https://github.com/anAngryAnt/LearningNotes/tree/master/Part3/Algorithm/Sort" target="_blank" rel="external">排序</a><ul>
<li><a href="https://github.com/anAngryAnt/LearningNotes/tree/master/Part3/Algorithm/Sort/选择排序.md" target="_blank" rel="external">选择排序</a></li>
<li><a href="https://github.com/anAngryAnt/LearningNotes/tree/master/Part3/Algorithm/Sort/冒泡排序.md" target="_blank" rel="external">冒泡排序</a></li>
<li><a href="https://github.com/anAngryAnt/LearningNotes/tree/master/Part3/Algorithm/Sort/快速排序.md" target="_blank" rel="external">快速排序</a></li>
<li><a href="https://github.com/anAngryAnt/LearningNotes/tree/master/Part3/Algorithm/Sort/归并排序.md" target="_blank" rel="external">归并排序</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/Sort/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%2010%20%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.md" target="_blank" rel="external">面试中的十大排序算法总结</a></li>
</ul>
</li>
<li>查找<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/Lookup/顺序查找.md" target="_blank" rel="external">顺序查找</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/Lookup/折半查找.md" target="_blank" rel="external">折半查找</a></li>
</ul>
</li>
<li>《剑指Offer》<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/剑指Offer/1.七种方式实现singleton模式.md" target="_blank" rel="external">面试题2:实现Singleton模式</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/剑指Offer/面试题6：重建二叉树.md" target="_blank" rel="external">面试题6：重建二叉树</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/剑指Offer/面试题11：数值的整数次方.md" target="_blank" rel="external">面试题11：数值的整数次方</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/剑指Offer/面试题44：扑克牌的顺子.md" target="_blank" rel="external">面试题44：扑克牌的顺子</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/剑指Offer/面试题45：圆圈中最后剩下的数字.md" target="_blank" rel="external">面试题45：圆圈中最后剩下的数字</a></li>
</ul>
</li>
<li>《程序员面试金典》</li>
<li>《LeetCode》<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/LeetCode/two-sum.md" target="_blank" rel="external">two-sum</a></li>
</ul>
</li>
<li>《程序员代码面试指南(左程云)》<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/程序员代码面试指南(左程云" target="_blank" rel="external">1.设计一个有getMin功能的栈</a>/1.设计一个有getMin功能的栈.md)</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/程序员代码面试指南(左程云" target="_blank" rel="external">2.由两个栈组成的队列</a>/2.由两个栈组成的队列.md)</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part3/Algorithm/程序员代码面试指南(左程云" target="_blank" rel="external">3.如何仅用递归函数和栈操作逆序一个栈</a>/3.如何仅用递归函数和栈操作逆序一个栈.md)</li>
</ul>
</li>
</ul>
<hr>
</li>
</ul>
<h2 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h2><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part4/Network" target="_blank" rel="external">Network(网络)</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/Network/TCP与UDP.md" target="_blank" rel="external">TCP/UDP</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/Network/Http协议.md" target="_blank" rel="external">HTTP</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/Network/Socket.md" target="_blank" rel="external">Socket</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/Network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB.md" target="_blank" rel="external">计算机网络基础汇总</a></li>
</ul>
</li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/OperatingSystem/操作系统.md" target="_blank" rel="external">OperatingSystem(操作系统)</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part4/OperatingSystem/Linux系统的IPC.md" target="_blank" rel="external">Linux系统的IPC</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h2><ul>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part5/ReadingNotes" target="_blank" rel="external">ReadingNotes(读书笔记)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《APP研发录》第1章读书笔记.md" target="_blank" rel="external">《APP研发录》第1章读书笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《APP研发录》第2章读书笔记.md" target="_blank" rel="external">《APP研发录》第2章读书笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第一章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第一章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第二章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第二章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第三章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第三章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第四章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第四章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第八章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第八章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Android开发艺术探索》第十五章笔记.md" target="_blank" rel="external">《Android开发艺术探索》第十五章笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《深入理解java虚拟机》第12章.md" target="_blank" rel="external">《深入理解Java虚拟机》第12章</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Java编程思想》第一章读书笔记.md" target="_blank" rel="external">《Java编程思想》第一章读书笔记</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/ReadingNotes/《Java编程思想》第二章读书笔记.md" target="_blank" rel="external">《Java编程思想》第二章读书笔记</a></li>
</ul>
</li>
<li><p><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part5/Project" target="_blank" rel="external">Project(项目)</a></p>
<ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part5/Project/项目.md" target="_blank" rel="external">项目难点</a></li>
</ul>
</li>
</ul>
<h2 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h2><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/tree/master/Part6/InterviewExperience" target="_blank" rel="external">InterviewExperience(面试经验)</a><ul>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/Alibaba.md" target="_blank" rel="external">Alibaba</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/美团.md" target="_blank" rel="external">美团</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/豌豆荚.md" target="_blank" rel="external">豌豆荚</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/蜻蜓FM.md" target="_blank" rel="external">蜻蜓FM</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/新浪微博.md" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part6/InterviewExperience/网易杭研.md" target="_blank" rel="external">网易杭研</a></li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> Android笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android-WebView设置Cookie]]></title>
      <url>/2017/01/23/Android-WebView%E8%AE%BE%E7%BD%AECookie/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天在项目中需要在WebView中设置Cookie。本来以为是一个简简单单的事情。结果捣鼓了两个小时才搞定，所以把自己踩过的坑记录下来。</p>
<p>因项目需要，需要在App中嵌入网页，使用Nativie方式登录，然后将cookie保存到WebView中，实现免登录功能。然后自己就在网上copy了下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">private void syncCookie(Context context, String url)&#123;</div><div class="line">        try&#123;</div><div class="line">            Log.d(&quot;Nat: webView.syncCookie.url&quot;, url);           </div><div class="line"></div><div class="line">            CookieSyncManager.createInstance(context);</div><div class="line"></div><div class="line">            CookieManager cookieManager = CookieManager.getInstance();</div><div class="line">            cookieManager.setAcceptCookie(true);</div><div class="line">            cookieManager.removeSessionCookie();// 移除</div><div class="line">            cookieManager.removeAllCookie();</div><div class="line">            String oldCookie = cookieManager.getCookie(url);</div><div class="line">            if(oldCookie != null)&#123;</div><div class="line">                Log.d(&quot;Nat: webView.syncCookieOutter.oldCookie&quot;, oldCookie);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            StringBuilder sbCookie = new StringBuilder();</div><div class="line">            sbCookie.append(String.format(&quot;JSESSIONID=%s&quot;,&quot;INPUT YOUR JSESSIONID STRING&quot;));</div><div class="line">            sbCookie.append(String.format(&quot;;domain=%s&quot;, &quot;INPUT YOUR DOMAIN STRING&quot;));</div><div class="line">            sbCookie.append(String.format(&quot;;path=%s&quot;,&quot;INPUT YOUR PATH STRING&quot;));</div><div class="line"></div><div class="line">            String cookieValue = sbCookie.toString();</div><div class="line">            cookieManager.setCookie(url, cookieValue);</div><div class="line">            CookieSyncManager.getInstance().sync(); </div><div class="line"></div><div class="line">            String newCookie = cookieManager.getCookie(url);</div><div class="line">            if(newCookie != null)&#123;</div><div class="line">                Log.d(&quot;Nat: webView.syncCookie.newCookie&quot;, newCookie);</div><div class="line">            &#125;</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            Log.e(&quot;Nat: webView.syncCookie failed&quot;, e.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>感觉上没什么问题，于是自己就开始了功能的开发并开始联调。在实际使用过程中发现Cookie并未保存成功，每次都会跳转到登录页面，纠结了很久，终于发现是在初始化WebView时漏掉了重要的东西<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebViewSettings</span><span class="params">()</span></span>&#123;</div><div class="line">    myWebView.getSettings().setSupportZoom(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setBuiltInZoomControls(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setDefaultFontSize(<span class="number">12</span>);</div><div class="line">    myWebView.getSettings().setLoadWithOverviewMode(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//如果访问的页面中有Javascript，则webview必须设置支持Javascript</span></div><div class="line">    myWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setUserAgentString(MyApplication.getUserAgent());</div><div class="line">    myWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</div><div class="line">    myWebView.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setAppCacheEnabled(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</div><div class="line">    myWebView.getSettings().setDatabaseEnabled(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>而这些还必须在<font color="#DC143C">设置Cookie之前调用</font></strong></p>
<p>本来以为就这样结束了。结果后端给我说我们的Cookie是两个字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vcvrm=&quot;FpgtjnaVsJC2lHJ3/ffkOw==&quot;; </div><div class="line">vcmserp=&quot;j0swlWZ8G6XZQX5sHUf7K==&quot;</div></pre></td></tr></table></figure></p>
<p>而我之前的写法怎么都加不上第二个Cookie，我一直以为是我拼接字符串错了，还特意的用postman测试了一下是可以的。于是我又开始寻找解决办法。想想既然是多个Cookie，我能不能一个一个的添加呢？抱着试一试的心态就产生了一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookieManager.setCookie(cookieUrl,&quot;vcvrm=\&quot;FpgtjnaVsJC2lHJ3/ffkOw==\&quot;&quot;);</div><div class="line">cookieManager.setCookie(cookieUrl,&quot;vcmserp=\&quot;j0swlWZ8G6XZQX5sHUf7K==\&quot;&quot;);</div></pre></td></tr></table></figure></p>
<p>如上所见，结果真的解决了。</p>
<p>问题解决了，那这篇文章也结束了。希望能帮到一些朋友。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Android笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Freeline的基本使用]]></title>
      <url>/2016/12/29/Freeline%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Freeline-介绍"><a href="#Freeline-介绍" class="headerlink" title="Freeline 介绍"></a>Freeline 介绍</h1><blockquote>
<p>Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案，稳定性方面：完善的基线对齐，进程级别异常隔离机制。性能方面：内部采用了类似Facebook的开源工具buck的多工程多任务并发思想, 并对代码及资源编译流程做了深入的性能优化。</p>
</blockquote>
<h1 id="Freeline-特性"><a href="#Freeline-特性" class="headerlink" title="Freeline 特性!"></a>Freeline 特性!</h1><ol>
<li>支持调试</li>
<li>系统最低支持到api level 9</li>
<li>支持标准的多模块Gradle工程的增量构建</li>
<li>并发执行增量编译任务</li>
<li>进程级别异常隔离机制</li>
<li>支持so动态更新</li>
<li>支持resource.arsc缓存</li>
<li>支持retrolambda</li>
<li>支持DataBinding</li>
<li>支持各类主流注解库</li>
<li>支持Windows，Linux，Mac平</li>
</ol>
<h1 id="Freeline-的不足"><a href="#Freeline-的不足" class="headerlink" title="Freeline 的不足"></a>Freeline 的不足</h1><ol>
<li>第一次增量资源编译的时候可能会有点慢</li>
<li>不支持删除带id的资源，否则可能导致aapt编译出错</li>
<li>暂不支持抽象类的增量编译</li>
<li>不支持开启 Jack 编译</li>
<li>不支持 Kotlin/Groovy/Scala</li>
</ol>
<h1 id="Freeline-的环境搭建"><a href="#Freeline-的环境搭建" class="headerlink" title="Freeline 的环境搭建"></a>Freeline 的环境搭建</h1><ol>
<li>安装python、并配置系统环境变量。因为Freeline是用python写的，下面的的所有操作，包括编译等都要依赖python，所以我们要安装python，并且配置系统环境变量(部分电脑需要重启一次才能生效)。<strong>python的版本只能是2.x.x</strong>，<a href="https://www.python.org/downloads/release/python-2712/" target="_blank" rel="external">2.7.12版</a></li>
<li>Android Studio 安装插件<strong>Freeline</strong>。怎么装插件就不演示了。</li>
<li><p>在项目level的build.gradle中添加插件依赖 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> dependencies &#123;</div><div class="line">       classpath &apos;com.antfortune.freeline:gradle:0.8.4&apos;</div><div class="line">   &#125;</div><div class="line">repositories &#123;</div><div class="line">       jcenter()</div><div class="line">       mavenCentral()</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在项目主module的build.gradle中应用freeline插件的依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.antfortune.freeline&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>. 在项目主module的build.gradle中配置了productFlavors的话，还需要加入以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">freeline &#123;</div><div class="line">     hack true</div><div class="line">     productFlavor &apos;you-flavor-name&apos;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为你的项目下载安装Freeline 。在Android Studio的Terminal中运行gradlew initFreeline -Pmirror</p>
</li>
<li><p>在项目Application中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FreelineCore.init(this);</div></pre></td></tr></table></figure>
</li>
<li><p>运行<br>   <img src="/assets/run.png" alt=""></p>
</li>
</ol>
<blockquote>
<p>这里就已经完了，大家赶快行动起来吧！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[DownloadManager初相见]]></title>
      <url>/2016/12/27/DownloadManager%E5%88%9D%E7%9B%B8%E8%A7%81/</url>
      <content type="html"><![CDATA[<h1 id="DownloadManager"><a href="#DownloadManager" class="headerlink" title="DownloadManager"></a>DownloadManager</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DownloadManager是系统====(2.3以后)开放给第三方应用使用的类，包含两个静态内部类DownloadManager.Query和DownloadManager.Request。DownloadManager.Request用来请求一个下载，DownloadManager.Query用来查询下载信息。在大多数涉及到下载的情况中使用Download Manager都是不错的选择，特别是当用户切换不同的应用以后下载需要在后台继续进行，以及当下载任务顺利完。</p>
<h2 id="简单展示"><a href="#简单展示" class="headerlink" title="简单展示"></a>简单展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lv.okgodemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.DownloadManager;</div><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.content.IntentFilter;</div><div class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Date: 2016-11-10</div><div class="line">* Time: 16:24</div><div class="line">* Description: 下載</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BroadcastReceiver receiver;</div><div class="line">    <span class="keyword">private</span> DownloadManager dm;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOWN_URL = <span class="string">"down_url"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MIUI_VERSION_CODE = <span class="string">"ro.miui.ui.version.code"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MIUI_VERSION_NAME = <span class="string">"ro.miui.ui.version.name"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MIUI_INTERNAL_STORAGE = <span class="string">"ro.miui.internal.storage"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="comment">//主要是检查url是否存在</span></div><div class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span> || intent.getStringExtra(DOWN_URL) == <span class="keyword">null</span>) &#123;</div><div class="line">            stopSelf();</div><div class="line">            <span class="keyword">return</span> Service.START_STICKY;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//初始化下载完成广播</span></div><div class="line">        receiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (intent == <span class="keyword">null</span> || dm == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                <span class="comment">//判断是否是下载完成</span></div><div class="line">                <span class="keyword">if</span> (TextUtils.equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE, intent.getAction())) &#123;</div><div class="line">                    <span class="comment">//获取下载完成的文件名称</span></div><div class="line">                    Bundle extras = intent.getExtras();</div><div class="line">                    DownloadManager.Query q = <span class="keyword">new</span> DownloadManager.Query();</div><div class="line">                    q.setFilterById(extras.getLong(DownloadManager.EXTRA_DOWNLOAD_ID));</div><div class="line">                    Cursor c = dm.query(q);</div><div class="line">                    <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; c.moveToFirst()) &#123;</div><div class="line">                        <span class="keyword">int</span> status = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class="line">                        <span class="keyword">if</span> (status == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class="line">                            String title = c.getString(c.getColumnIndex(DownloadManager.COLUMN_TITLE));</div><div class="line">                           <span class="comment">//执行安装</span></div><div class="line">                            intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">                            intent.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(Environment.getExternalStorageDirectory() + File.separator + Environment.DIRECTORY_DOWNLOADS + File.separator + title)),</div><div class="line">                                    <span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">                            startActivity(intent);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (c != <span class="keyword">null</span>)</div><div class="line">                        c.close();</div><div class="line">                &#125;</div><div class="line">                stopSelf();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        registerReceiver(receiver, <span class="keyword">new</span> IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class="line">        <span class="comment">//用项目名称作为apk的文件名称</span></div><div class="line">        PackageManager pm = <span class="keyword">this</span>.getPackageManager();</div><div class="line">        String apkName = getApplicationInfo().loadLabel(pm).toString() + <span class="string">".apk"</span>;</div><div class="line">        startDownload(intent.getStringExtra(DOWN_URL), apkName);</div><div class="line">        <span class="keyword">return</span> Service.START_REDELIVER_INTENT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主要是处理小米手机的</div><div class="line">     * <span class="doctag">@param</span> url 下载地址</div><div class="line">     * <span class="doctag">@return</span> 真实的下载地址</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doRealUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//获取build Properties 判断是不是小米手机</span></div><div class="line">            Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">            properties.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"build.prop"</span>)));</div><div class="line">            <span class="keyword">if</span> (properties.getProperty(KEY_MIUI_VERSION_CODE, <span class="keyword">null</span>) != <span class="keyword">null</span> || properties.getProperty(KEY_MIUI_VERSION_NAME, <span class="keyword">null</span>) != <span class="keyword">null</span></div><div class="line">                    || properties.getProperty(KEY_MIUI_INTERNAL_STORAGE, <span class="keyword">null</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">                url += <span class="string">" "</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> url;</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</div><div class="line">            <span class="keyword">return</span> url;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            unregisterReceiver(receiver);</div><div class="line">            stopSelf();</div><div class="line">            <span class="keyword">super</span>.onDestroy();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动下载</div><div class="line">     * <span class="doctag">@param</span> url 地址</div><div class="line">     * <span class="doctag">@param</span> apkName 文件名称</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">(String url, String apkName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        dm = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);</div><div class="line">        DownloadManager.Request request = <span class="keyword">new</span> DownloadManager.Request(Uri.parse(doRealUrl(url)));</div><div class="line">        <span class="comment">//下载网络需求  手机数据流量、wifi</span></div><div class="line">        request.setAllowedNetworkTypes( DownloadManager.Request.NETWORK_MOBILE | DownloadManager.Request.NETWORK_WIFI ) ;</div><div class="line"></div><div class="line">        <span class="comment">//设置是否允许漫游网络 建立请求 默认true</span></div><div class="line">        request.setAllowedOverRoaming( <span class="keyword">true</span> ) ;</div><div class="line"></div><div class="line">		<span class="comment">/*在默认的情况下，通过Download Manager下载的文件是不能被Media Scanner扫描到的 。</span></div><div class="line">		进而这些下载的文件（音乐、视频等）就不会在Gallery 和  Music Player这样的应用中看到。</div><div class="line">		为了让下载的音乐文件可以被其他应用扫描到，我们需要调用Request对象的</div><div class="line">		 */</div><div class="line">        request.allowScanningByMediaScanner() ; </div><div class="line"></div><div class="line">        <span class="comment">//设置请求的Mime</span></div><div class="line">        request.setMimeType(<span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">       <span class="comment">/*如果我们希望下载的文件可以被系统的Downloads应用扫描到并管理，</span></div><div class="line">		我们需要调用Request对象的setVisibleInDownloadsUi方法，传递参数true。*/</div><div class="line">        request.setVisibleInDownloadsUi( <span class="keyword">true</span> ) ;</div><div class="line">        <span class="comment">//设置下载路径</span></div><div class="line">        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, apkName);</div><div class="line">        <span class="comment">//执行下载</span></div><div class="line">        dm.enqueue(request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而我们启动的时候也很是简单,在Activity中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, DownloadService.class).putExtra(DownloadService.DOWN_URL, url));</div></pre></td></tr></table></figure></p>
<p>这就是简单的下载了。本文只是做一个简单的事例，没有去考虑太多情况。</p>
<h2 id="那接下来说说我遇见的坑"><a href="#那接下来说说我遇见的坑" class="headerlink" title="那接下来说说我遇见的坑"></a>那接下来说说我遇见的坑</h2><p>没错就是代码中针对小米手机的处理。我们公司的apk防在一个服务器上，我用DownloadManager进行下载的时候始终是完成不了，而换成其他手机或者浏览器都是没有问题的。最后我才发现原来是要在url最后面加一个空格，但是如果每次都加一个空格其他手机又没办法识别了，所以才有了doRealUrl这个方法的判断是不是小米，以及处理url。</p>
<h2 id="感谢大家浏览"><a href="#感谢大家浏览" class="headerlink" title="感谢大家浏览"></a>感谢大家浏览</h2>]]></content>
      
        <categories>
            
            <category> Android笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Git向GitHub上传代码]]></title>
      <url>/2016/11/22/%E4%BD%BF%E7%94%A8Git%E5%90%91GitHub%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>如果你对Git还一无所知，建议你先看一下<a href="http://www.jianshu.com/p/7e5ca3ca6e07" target="_blank" rel="external">初识版本控制工具Git</a>，对Git有一定的了解后再来看这篇文章。如果你对Git有一定的了解并且已经配置好SSH key，只是想了解如何将代码上传到GitHub，那么你可以跳过前面部分到<strong>提交代码</strong>部分查看。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-57c799d0c0b073fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub"></p>
<ul>
<li><p>什么是GitHub<br><a href="https://github.com/" target="_blank" rel="external">GitHub</a>是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。</p>
</li>
<li><p>为什么要使用Github<br>GitHub是目前全球最大的开源社区，全球各大科技公司纷纷在GitHub开源各自的项目，这无疑是我们学习先进技术的好地方。</p>
<blockquote>
<p><a href="https://github.com/google" target="_blank" rel="external">Google</a><br><a href="https://github.com/apple" target="_blank" rel="external">苹果</a><br><a href="https://github.com/twitter" target="_blank" rel="external">twitter</a><br><a href="https://github.com/facebook" target="_blank" rel="external">Facebook</a><br>……</p>
</blockquote>
</li>
<li><p>注册GitHub账号<br>1.先到<a href="https://github.com/" target="_blank" rel="external">GitHub</a>官网Sign up(注册)一个账号。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-252ddb2ad7830f39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>填好用户名、邮箱、密码进入下一步</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-8c01ebd47cde02c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>使用默认的plan即免费的，公开的就可以了，就是创建的项目是对外开放的，任何人都可以看的。点击Finish sign up就完成注册了。接下来就看看怎么向GitHub提交我们的代码。</p>
<p><strong>SSH授权</strong><br>注册好账号之后我们可以随意的查看其他人的项目，甚至是clone下载，但是要提交代码就必须完成SSH授权，如果可以不用授权就提交代码的话，那么Github岂不是乱了套。</p>
<p>1.生成SSH key<br>打开Git Bash，输入ssh-keygen -t rsa然后按三下回车，如下图所示<br><img src="http://upload-images.jianshu.io/upload_images/1917079-1caf3ee12f72f69b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">接着就会在C:\Users\Administrator.ssh目录下生成到id_rsa和id_rsa.pub两个文件，id_rsa是密钥，id_rsa.pub是公钥，接下来需要将id_rsa.pub的内容添加到GitHub上，这样本地的id_rsa密钥才能跟GitHub上的id_rsa.pub公钥进行配对，才能够授权成功。</p>
<p>2.在GitHub上添加SSH Key</p>
<p>首先点击右上角的倒三角进入Settings<br><img src="http://upload-images.jianshu.io/upload_images/1917079-dce901df90f31d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>紧接着选择左侧SSH and GPG keys,然后选择右上角的New SSH key，再把id_sra.pub的内容复制粘贴到key（id_sra.pub可以使用记事本打开），最后Add SSH key就可以了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-5b17cabfa308069e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>SSH key 添加成功之后，输入 <strong>ssh -T git@github.com </strong>进行测试，如果出现以下提示证明添加成功了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-db1b3c8eb8f879c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<p><strong>提交代码</strong><br>首先在Github新建一个仓库，回到首页，点击右上角的New repository新建仓库。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-dd563b3b85ad32c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接下来输入仓库名称，然后创建仓库就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-ed40de469d3dff71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>仓库创建好了之后，按右侧按钮复制SSH地址。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-b020e0be28249d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>一切准备就绪，接下来就是Git的事了，首先进入想要上传到GitHub的项目的文件夹下，创建好本地仓库，将想要上传的文件先添加到本地仓库中。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-45ee27a5f6184f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接下来使用git remote add origin git@github.com:InstanceFeiben/Test.git（git@github.com:InstanceFeiben/Test.git为SSH地址，在GitHub上复制）命令将本地仓库与远程仓库取得关联，最后在通过git push -u origin master命令将代码push到GitHub。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-b358f81cbda4dbc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接下来刷新GitHub就可以看到刚刚提交上去的代码了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1917079-b2d63a6d20adb784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>解决问题</strong><br>如果出现以下问题，可以先使用git pull origin master命令后再使用git push -u origin master命令。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-7bbe89b85b1bcdaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>如果文章对你有所帮助，那么请您点一下♥<br>由于本人水平有限，如有错误，欢迎大家指正。如果你在操作过程中发现一些没有讲到的错误或者问题，欢迎在评论留言，一起探讨，共同学习进步！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Git笔记 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
